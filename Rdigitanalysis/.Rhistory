break_out = 'DIST'
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out)
a=data.frame()
a
a['x', ] = 1
a
a
a['x', ] = NA
a
a=data.frame(1)
a
a['2', ]= 3
a
##################!!!!!!!!!!!!!!!!might also use else where
#return the merged rows of all data columns aligned-right digits
combine_by_columns = function(digitdata, data_columns, indexes=NA){
data = single_column_aligned(digitdata, desired_col=data_columns[1], align_diretion='right')
if (!(is.na(indexes[1]))){
data = data[indexes, ]
}
colnames(data) = rev(digitdata@right_aligned_column_names[1:length(data)])
if (length(data_columns) > 1){
for (i in 2:length(data_columns)){
data2 = single_column_aligned(digitdata, desired_col=data_columns[i], align_diretion='right')
colnames(data2) = rev(digitdata@right_aligned_column_names[1:length(data2)])
data = dplyr::bind_rows(data, data2)
}
}
#change columns in correct order
data = data[rev(digitdata@right_aligned_column_names[1:length(data)])]
return(data)
}
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out)
#get the observed mean from data
get_observed_mean = function(data, num_digits){
#the digit places from right we are interested in
print((length(data)-num_digits+1))
data = data[(length(data)-num_digits+1):length(data)]
if (!(is.na(omit_05[1]))){
#remove 0 entries
data[data == 0] = NA
if (length(omit_05) == 2){
#remove 5 entries
data[data == 5] = NA
}
}
observed_mean = t(colMeans(data, na.rm = TRUE)) #do t() such that it is a dataframe
return(observed_mean)
}
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out)
#get the observed mean from data
get_observed_mean = function(data, num_digits){
if (num_digits > length(data)){
stop('the number of digits desired to evaluate is greater than the max length number in the dataset')
}
#the digit places from right we are interested in
print((length(data)-num_digits+1))
data = data[(length(data)-num_digits+1):length(data)]
if (!(is.na(omit_05[1]))){
#remove 0 entries
data[data == 0] = NA
if (length(omit_05) == 2){
#remove 5 entries
data[data == 5] = NA
}
}
observed_mean = t(colMeans(data, na.rm = TRUE)) #do t() such that it is a dataframe
return(observed_mean)
}
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out)
#get the observed mean from data
get_observed_mean = function(data, num_digits){
if (num_digits > length(data)){
stop('the number of digits desired to evaluate is greater than the max length number in the dataset')
}
#the digit places from right we are interested in
print((length(data)-num_digits+1))
data = data[(length(data)-num_digits+1):length(data)]
if (!(is.na(omit_05[1]))){
#remove 0 entries
data[data == 0] = NA
if (length(omit_05) == 2){
#remove 5 entries
data[data == 5] = NA
}
}
observed_mean = t(colMeans(data, na.rm = TRUE)) #do t() such that it is a dataframe
print('sfsfsf')
return(observed_mean)
}
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out)
#main fucntion
padding_test = function(digitdata, contingency_table, data_columns, max_length=8, num_digits=5, N=10000, omit_05=c(0,5), break_out=NA){
#checkings
if (length(omit_05) == 1){
###check omit only 5, which is not allowed
if (!(is.na(omit_05)) && (omit_05 == 5)){
stop('cannot omit only 5 without also omitting 0 first')
}
}
#get benford mean in each digit place
Benford = get_benford_mean(contingency_table, omit_05)
Benford_mean = Benford$Benford_mean
contingency_table = Benford$contingency_table
######################################################
#get combined by rows data for all data columns needed
combined_data = combine_by_columns(digitdata, data_columns, indexes=NA)
#get expected and observed mean in each digit position
lst = get_expected_mean(digitdata, combined_data, Benford_mean, max_length, num_digits)
freq_table=lst$freq_table
expected_mean = lst$expected_mean
rownames(expected_mean) = 'all'
observed_mean = get_observed_mean(lst$final_data, num_digits)
rownames(observed_mean) = 'all'
#get the difference in expected and observed mean in each digit position
diff_in_mean = observed_mean - expected_mean
rownames(diff_in_mean) = 'all'
#Monte Carlo Stimulation of N datasets and get mean
stimulated_mean = Benford_stimulation(N, freq_table, expected_mean, contingency_table)
#get p values by comparing with stimulation
p_values = get_p_value(observed_mean, stimulated_mean)
rownames(p_values) = 'all'
######################################################
#break out by category
if (!(is.na(break_out))){
#get indexes for each category
indexes_of_categories = break_by_category(digitdata@cleaned, break_out) #this is a list since unequal number of entries for each category
#break by category for all
for (category_name in names(indexes_of_categories)){
indexes_of_category = indexes_of_categories[[category_name]]
######################################################
#get combined by rows data for all data columns needed
combined_data_of_category = combine_by_columns(digitdata, data_columns, indexes=indexes_of_category)
#get expected and observed mean in each digit position
lst = get_expected_mean(digitdata, combined_data_of_category, Benford_mean, max_length, num_digits)
freq_table=lst$freq_table
expected_mean[category_name, ] = lst$expected_mean
print(observed_mean)
observed_mean[category_name, ] = get_observed_mean(lst$final_data, num_digits)
#get the difference in expected and observed mean in each digit position
diff_in_mean[category_name, ]  = observed_mean[category_name, ] - expected_mean[category_name, ]
#Monte Carlo Stimulation of N datasets and get mean
stimulated_mean = Benford_stimulation(N, freq_table, expected_mean[category_name, ], contingency_table)
#get p values by comparing with stimulation
p_values[category_name, ] = get_p_value(observed_mean[category_name, ], stimulated_mean)
######################################################
}
}
return(list(diff_in_mean=diff_in_mean, p_values=p_values, expected_mean=expected_mean, observed_mean=observed_mean))
}
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out)
#get the observed mean from data
get_observed_mean = function(data, num_digits){
if (num_digits > length(data)){
stop('the number of digits desired to evaluate is greater than the max length number in the dataset')
}
#the digit places from right we are interested in
data = data[(length(data)-num_digits+1):length(data)]
if (!(is.na(omit_05[1]))){
#remove 0 entries
data[data == 0] = NA
if (length(omit_05) == 2){
#remove 5 entries
data[data == 5] = NA
}
}
observed_mean = t(colMeans(data, na.rm = TRUE)) #do t() such that it is a dataframe
return(observed_mean)
}
#main fucntion
padding_test = function(digitdata, contingency_table, data_columns, max_length=8, num_digits=5, N=10000, omit_05=c(0,5), break_out=NA){
#checkings
if (length(omit_05) == 1){
###check omit only 5, which is not allowed
if (!(is.na(omit_05)) && (omit_05 == 5)){
stop('cannot omit only 5 without also omitting 0 first')
}
}
#get benford mean in each digit place
Benford = get_benford_mean(contingency_table, omit_05)
Benford_mean = Benford$Benford_mean
contingency_table = Benford$contingency_table
######################################################
#get combined by rows data for all data columns needed
combined_data = combine_by_columns(digitdata, data_columns, indexes=NA)
#get expected and observed mean in each digit position
lst = get_expected_mean(digitdata, combined_data, Benford_mean, max_length, num_digits)
freq_table=lst$freq_table
expected_mean = lst$expected_mean
rownames(expected_mean) = 'all'
observed_mean = get_observed_mean(lst$final_data, num_digits)
rownames(observed_mean) = 'all'
#get the difference in expected and observed mean in each digit position
diff_in_mean = observed_mean - expected_mean
rownames(diff_in_mean) = 'all'
#Monte Carlo Stimulation of N datasets and get mean
stimulated_mean = Benford_stimulation(N, freq_table, expected_mean, contingency_table)
#get p values by comparing with stimulation
p_values = get_p_value(observed_mean, stimulated_mean)
rownames(p_values) = 'all'
######################################################
#break out by category
if (!(is.na(break_out))){
#get indexes for each category
indexes_of_categories = break_by_category(digitdata@cleaned, break_out) #this is a list since unequal number of entries for each category
#break by category for all
for (category_name in names(indexes_of_categories)){
indexes_of_category = indexes_of_categories[[category_name]]
######################################################
#get combined by rows data for all data columns needed
combined_data_of_category = combine_by_columns(digitdata, data_columns, indexes=indexes_of_category)
#get expected and observed mean in each digit position
lst = get_expected_mean(digitdata, combined_data_of_category, Benford_mean, max_length, num_digits)
freq_table=lst$freq_table
expected_mean[category_name, ] = lst$expected_mean
print(observed_mean)
observed_mean[category_name, ] = NA
observed_mean[category_name, ] = get_observed_mean(lst$final_data, num_digits)
#get the difference in expected and observed mean in each digit position
diff_in_mean[category_name, ]  = observed_mean[category_name, ] - expected_mean[category_name, ]
#Monte Carlo Stimulation of N datasets and get mean
stimulated_mean = Benford_stimulation(N, freq_table, expected_mean[category_name, ], contingency_table)
#get p values by comparing with stimulation
p_values[category_name, ] = get_p_value(observed_mean[category_name, ], stimulated_mean)
######################################################
}
}
return(list(diff_in_mean=diff_in_mean, p_values=p_values, expected_mean=expected_mean, observed_mean=observed_mean))
}
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out)
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out=NA)
a
a$observed_mean
a$observed_mean['x', ]=NA
typeof(a$observed_mean)#['x', ]=NA
data.frame(a$observed_mean)#['x', ]=NA
data.frame(a$observed_mean)['x', ]=NA
s=data.frame(a$observed_mean)
s['x', ]=NA
s
#get the observed mean from data
get_observed_mean = function(data, num_digits){
if (num_digits > length(data)){
stop('the number of digits desired to evaluate is greater than the max length number in the dataset')
}
#the digit places from right we are interested in
data = data[(length(data)-num_digits+1):length(data)]
if (!(is.na(omit_05[1]))){
#remove 0 entries
data[data == 0] = NA
if (length(omit_05) == 2){
#remove 5 entries
data[data == 5] = NA
}
}
observed_mean = data.frame(t(colMeans(data, na.rm = TRUE))) #do t() such that it is a dataframe
colnames(observed_mean) = colnames(data)#change col names cuz it is weird due to data.frame()
return(observed_mean)
}
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out)
#main fucntion
padding_test = function(digitdata, contingency_table, data_columns, max_length=8, num_digits=5, N=10000, omit_05=c(0,5), break_out=NA){
#checkings
if (length(omit_05) == 1){
###check omit only 5, which is not allowed
if (!(is.na(omit_05)) && (omit_05 == 5)){
stop('cannot omit only 5 without also omitting 0 first')
}
}
#get benford mean in each digit place
Benford = get_benford_mean(contingency_table, omit_05)
Benford_mean = Benford$Benford_mean
contingency_table = Benford$contingency_table
######################################################
#get combined by rows data for all data columns needed
combined_data = combine_by_columns(digitdata, data_columns, indexes=NA)
#get expected and observed mean in each digit position
lst = get_expected_mean(digitdata, combined_data, Benford_mean, max_length, num_digits)
freq_table=lst$freq_table
expected_mean = lst$expected_mean
rownames(expected_mean) = 'all'
observed_mean = get_observed_mean(lst$final_data, num_digits)
rownames(observed_mean) = 'all'
#get the difference in expected and observed mean in each digit position
diff_in_mean = observed_mean - expected_mean
rownames(diff_in_mean) = 'all'
#Monte Carlo Stimulation of N datasets and get mean
stimulated_mean = Benford_stimulation(N, freq_table, expected_mean, contingency_table)
#get p values by comparing with stimulation
p_values = get_p_value(observed_mean, stimulated_mean)
rownames(p_values) = 'all'
######################################################
#break out by category
if (!(is.na(break_out))){
#get indexes for each category
indexes_of_categories = break_by_category(digitdata@cleaned, break_out) #this is a list since unequal number of entries for each category
#break by category for all
for (category_name in names(indexes_of_categories)){
indexes_of_category = indexes_of_categories[[category_name]]
######################################################
#get combined by rows data for all data columns needed
combined_data_of_category = combine_by_columns(digitdata, data_columns, indexes=indexes_of_category)
#get expected and observed mean in each digit position
lst = get_expected_mean(digitdata, combined_data_of_category, Benford_mean, max_length, num_digits)
freq_table=lst$freq_table
expected_mean[category_name, ] = lst$expected_mean
observed_mean[category_name, ] = get_observed_mean(lst$final_data, num_digits)
#get the difference in expected and observed mean in each digit position
diff_in_mean[category_name, ]  = observed_mean[category_name, ] - expected_mean[category_name, ]
#Monte Carlo Stimulation of N datasets and get mean
stimulated_mean = Benford_stimulation(N, freq_table, expected_mean[category_name, ], contingency_table)
#get p values by comparing with stimulation
p_values[category_name, ] = get_p_value(observed_mean[category_name, ], stimulated_mean)
######################################################
}
}
return(list(diff_in_mean=diff_in_mean, p_values=p_values, expected_mean=expected_mean, observed_mean=observed_mean))
}
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out)
a
omit_05=0
data_columns = c("ALEXP","BENTOT", "BENM", "BENF")
max_length = 7
num_digits = 5
N=100
break_out = NA#'DIST'
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out=NA)
a$diff_in_mean
a$p_values
a$expected_mean
a$observed_mean
omit_05=5
data_columns = c("ALEXP","BENTOT", "BENM", "BENF")
max_length = 7
num_digits = 5
N=100
break_out = NA#'DIST'
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out=NA)
omit_05=NA
data_columns = c("ALEXP","BENTOT", "BENM", "BENF")
max_length = 7
num_digits = 5
N=100
break_out = NA#'DIST'
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out=NA)
a$diff_in_mean
a$p_values
a$expected_mean
a$observed_mean
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
max_length = 7
num_digits = 5
N=100
break_out = NA#'DIST'
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out=NA)
omit_05=c(0,5)
omit_05=c(0,5)
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
max_length = 7
num_digits = 5
N=100
break_out = NA#'DIST'
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out=NA)
a$diff_in_mean
a$p_values
a$expected_mean
a$observed_mean
max_length = 6
num_digits = 5
N=100
break_out = NA#'DIST'
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out=NA)
a$diff_in_mean
a$p_values
a$expected_mean
a$observed_mean
max_length = 8
num_digits = 8
N=100
break_out = NA#'DIST'
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out=NA)
max_length = 7
num_digits = 7
N=100
break_out = NA#'DIST'
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out=NA)
a$diff_in_mean
a$p_values
a$expected_mean
a$observed_mean
omit_05=c(0,5)
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
max_length = 7
num_digits = 5
N=100
break_out = 'DIST'
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out=NA)
a$diff_in_mean
a$p_values
a$expected_mean
a$observed_mean
#load all functions for padding test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\padding test.R')
############################################################
#Tesiting; run the fucntions
#Wenjun Chang
#Summer 2020
############################################################
#############prelim############
#clear workspace
rm(list = ls())
#free up R memory
gc()
#force numerical representation rather than scientific
#options(scipen = 999)
options(scipen = 1)
options(digits = 2)
##############################
#load data input functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\data input functions.R')
#load functions for computing Benford table
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\Benford table functions.R')
#load helper functions for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all digit test helper functions.R')
#load chi square test GOF functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\chi square goodness of fit functions.R')
#load main function for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all digit test main function.R')
#load all functions for digit pair test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\digit pair test.R')
#load all functions for rounding test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\rounding test.R')
#load all functions for repeat test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\repeat test.R')
#load all functions for high low test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\high low test.R')
#load all functions for padding test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\padding test.R')
#############################################################
#############try it with given data##########################
#############################################################
#test data input and benford table functions
#load data input functions
data_columns = c("ALEXP","BENTOT", "BENM", "BENF")
fp = 'C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\ARID MASTER FINAL.csv'
DigitData = make_class(filepath = fp, col_analyzing = data_columns)
contingency_table = load_Benford_table('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\contingency_table.csv')
contingency_table
#test padding test
data_columns = c("ALEXP","BENTOT", "BENM", "BENF")
max_length = 7
num_digits = 5
N = 100
omit_05 = c(0,5)
break_out = 'DIST'
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out=NA)
a
a$diff_in_mean
a
a$diff_in_mean
a$p_values
a$expected_mean
a$observed_mean
omit_05 = c(0,5)
break_out = 'DIST'
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out)
a$diff_in_mean
a$p_values
a$expected_mean
a$observed_mean
#test padding test
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
max_length = 7
num_digits = 5
N = 10000
omit_05 = c(0,5)
break_out = 'DIST'
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out)
a
a$diff_in_mean
a$p_values
a$expected_mean
a$observed_mean
#test padding test
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
max_length = 7
num_digits = 5
N = 10 #120k datasets took 15 mins
omit_05 = 0
break_out = 'DIST'
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out)
a
a$diff_in_mean
a$p_values
a$expected_mean
a$observed_mean
omit_05 = NA
break_out = 'DIST'
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out)
a
a$diff_in_mean
a$p_values
a$expected_mean
a$observed_mean
omit_05 = c(0,5)
break_out = 'DIST'
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out)
a
a$diff_in_mean
a$p_values
a$expected_mean
a$observed_mean
