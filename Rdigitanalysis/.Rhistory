rownames(sector_repeats_table) = names(sector_grouping)
#do sector effect for all
sector_repeats_all = percent_repeats_by_sector(data, sector_column, sector_grouping)
#update returning table
sector_repeats_table['all'] = sector_repeats_all
#break out by category
if (!(is.na(break_out))){
#get indexes for each category
indexes_of_categories = break_by_category(data, break_out) #this is a list since unequal number of entries for each category
#breeak by category for all
for (category_name in names(indexes_of_categories)){
indexes_of_category = indexes_of_categories[[category_name]]
data_of_category = data.frame(data[indexes_of_category, ])
#####only difference from the if loop above
sector_repeats_in_category = percent_repeats_by_sector(data_of_category, sector_column, sector_grouping)
sector_repeats_table[category_name] = sector_repeats_in_category #an array
#####
}
}
#need to implement failure factor
return(sector_repeats_table)
}
}
#test data input and benford table functions
#load data input functions
fp = 'C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\ARID MASTER FINAL.csv'
data_columns = c("ALEXP","BENTOT", "BENM", "BENF")
duplicate_matching_cols = c('DIST', 'ALEXP')#, 'BENTOT')
remove_duplicate = TRUE
break_out = 'DIST'
data = DigitData@cleaned[1:30]
data[1,]
sector_column = 'SECTOR'
sector_grouping = list(Sector1=c("MICRO", "TRN"), Sector2=c("CW" , "GE", "TRAVEL"), Sector3="VEHICLES")
sector_grouping
indexes_of_sectors = break_by_category(data, sector_column)
indexes_of_sectors
percent_repeats_by_sector(data, sector_column, sector_grouping)
repeat_test(DigitData, duplicate_matching_cols, remove_duplicate=remove_duplicate, break_out=break_out, sector_column=sector_column, sector_grouping=sector_grouping, failure_factor=3)
0/0
is.nan(0/0)
is.na(0/0)
sector_grouping = list(Sector1=c("MICRO", "TRN"), Sector2=c("CW" , "GE"), Sector3=c("TRAVEL", "VEHICLES"))
sector_column = 'SECTOR'
sector_grouping = list(Sector1=c("MICRO", "TRN"), Sector2=c("CW" , "GE"), Sector3=c("TRAVEL", "VEHICLES"))
sector_grouping
repeat_test(DigitData, duplicate_matching_cols, remove_duplicate=remove_duplicate, break_out=break_out, sector_column=sector_column, sector_grouping=sector_grouping, failure_factor=3)
#test data input and benford table functions
#load data input functions
fp = 'C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\ARID MASTER FINAL.csv'
data_columns = c("ALEXP","BENTOT", "BENM", "BENF")
duplicate_matching_cols = c('DIST', 'ALEXP')#, 'BENTOT')
remove_duplicate = TRUE
break_out = 'DIST'
data = DigitData@cleaned[1:30]
data[1,]
sector_column = 'SECTOR'
sector_grouping = list(Sector1=c("MICRO", "TRN"), Sector2=c("CW" , "GE"), Sector3=c("TRAVEL", "VEHICLES"))
sector_grouping
repeat_test(DigitData, duplicate_matching_cols, remove_duplicate=remove_duplicate, break_out=break_out, sector_column=sector_column, sector_grouping=sector_grouping, failure_factor=3)
#find the percent of repeats in the given data based on given definition of a repeat (what columns need to match)
find_percent_repeats = function(data, duplicate_matching_cols, remove_duplicate){
if (remove_duplicate){
#remove duplicate entries
data = unique(data)
}
#find repeats based on specified definition of a repeat
columns_for_repeat_check = data[duplicate_matching_cols]
unique_numbers = dim(unique(columns_for_repeat_check))[1]
total_numbers = dim(columns_for_repeat_check)[1]
num_repeats = total_numbers - unique_numbers
percent_repeats = num_repeats / total_numbers
return(percent_repeats)
}
percent_repeats_by_sector = function(data, sector_column, sector_grouping){
#intilaize an array for the category we are analyzing on (all, district name A, etc....)
sector_table = data.frame(matrix(nrow = length(sector_grouping), ncol=1))
#name each sector s.t. if sector name does not match in the rows, rbind in df will throw error
rownames(sector_table) = names(sector_grouping)
#get indexes for each category in the specified sector column
indexes_of_sectors = break_by_category(data, sector_column) #this is a list since unequal number of entries for each category
for (sector_name in names(sector_grouping)){
#get the index of sector by accessing the names of the categories in the data column that belong to this sector
indexes_of_sector = indexes_of_sectors[sector_grouping[[sector_name]]]
indexes_of_sector = unlist(indexes_of_sector) #turn into an array
data_of_sector = data.frame(data[indexes_of_sector, ])
percent_repeats_in_sector = find_percent_repeats(data_of_sector, duplicate_matching_cols, remove_duplicate)
sector_table[sector_name, ] = percent_repeats_in_sector
}
return(sector_table)
}
repeat_test = function(digitdata, duplicate_matching_cols, remove_duplicate=TRUE, break_out=NA, sector_column=NA, sector_grouping=NA, failure_factor=3){
if (!(is.na(sector_column))){
if (is.na(match(sector_column, colnames(digitdata@cleaned)))){
stop('specified column to analyze sector effect is not a column in the data')
}
else{
for (sector_name in names(sector_grouping)){
if (NA %in% match(sector_grouping[[sector_name]], unique(digitdata@cleaned[[sector_column]]))){
stop('specified category is not a category in the column specified to analyze sector effect')
}
}
}
}
#the columns we want to analyze
data = digitdata@cleaned[1:30]#############################neeed change
#perform repeat test
if (is.na(sector_column)){
#percent repeats for all
percent_repeats_all = find_percent_repeats(data, duplicate_matching_cols, remove_duplicate)
#df to store stats
percent_repeats_table = data.frame(all=percent_repeats_all)
#break out by category
if (!(is.na(break_out))){
#get indexes for each category
indexes_of_categories = break_by_category(data, break_out) #this is a list since unequal number of entries for each category
#breeak by category for all
for (category_name in names(indexes_of_categories)){
indexes_of_category = indexes_of_categories[[category_name]]
data_of_category = data.frame(data[indexes_of_category, ])
percent_repeats_in_category = find_percent_repeats(data_of_category, duplicate_matching_cols, remove_duplicate)
percent_repeats_table[category_name] = percent_repeats_in_category #a value
}
}
return(percent_repeats_table)
}
#perform sector test
else {
#initialize 2D table for stats values
sector_repeats_table = data.frame(matrix(nrow = length(sector_grouping), ncol=0))
#name each sector s.t. if sector name does not match in the rows, rbind in df will throw error
rownames(sector_repeats_table) = names(sector_grouping)
#do sector effect for all
sector_repeats_all = percent_repeats_by_sector(data, sector_column, sector_grouping)
#update returning table
sector_repeats_table['all'] = sector_repeats_all
#break out by category
if (!(is.na(break_out))){
#get indexes for each category
indexes_of_categories = break_by_category(data, break_out) #this is a list since unequal number of entries for each category
#breeak by category for all
for (category_name in names(indexes_of_categories)){
indexes_of_category = indexes_of_categories[[category_name]]
data_of_category = data.frame(data[indexes_of_category, ])
#####only difference from the if loop above
sector_repeats_in_category = percent_repeats_by_sector(data_of_category, sector_column, sector_grouping)
sector_repeats_table[category_name] = sector_repeats_in_category #an array
#####
}
}
#need to implement failure factor
return(sector_repeats_table)
}
}
#test data input and benford table functions
#load data input functions
fp = 'C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\ARID MASTER FINAL.csv'
data_columns = c("ALEXP","BENTOT", "BENM", "BENF")
duplicate_matching_cols = c('DIST', 'ALEXP')#, 'BENTOT')
remove_duplicate = TRUE
break_out = 'DIST'
data = DigitData@cleaned[1:30]
data[1,]
sector_column = 'SECTOR'
sector_grouping = list(Sector1=c("MICRO", "TRN"), Sector2=c("CW" , "GE"), Sector3=c("TRAVEL", "VEHICLES"))
sector_grouping
repeat_test(DigitData, duplicate_matching_cols, remove_duplicate=remove_duplicate, break_out=break_out, sector_column=sector_column, sector_grouping=sector_grouping, failure_factor=3)
duplicate_matching_cols = c('DIST', 'ALEXP')#, 'BENTOT')
remove_duplicate = FALSE
break_out = 'DIST'
data = DigitData@cleaned[1:30]
sector_column = 'SECTOR'
sector_grouping = list(Sector1=c("MICRO", "TRN"), Sector2=c("CW" , "GE"), Sector3=c("TRAVEL", "VEHICLES"))
sector_grouping
repeat_test(DigitData, duplicate_matching_cols, remove_duplicate=remove_duplicate, break_out=break_out, sector_column=sector_column, sector_grouping=sector_grouping, failure_factor=3)
duplicate_matching_cols = c('DIST', 'ALEXP', 'BENTOT')
remove_duplicate = FALSE
break_out = 'DIST'
data = DigitData@cleaned[1:30]
sector_column = 'SECTOR'
sector_grouping = list(Sector1=c("MICRO", "TRN"), Sector2=c("CW" , "GE"), Sector3=c("TRAVEL", "VEHICLES"))
sector_grouping
repeat_test(DigitData, duplicate_matching_cols, remove_duplicate=remove_duplicate, break_out=break_out, sector_column=sector_column, sector_grouping=sector_grouping, failure_factor=3)
duplicate_matching_cols = c('ALEXP', #'DIST', 'BENTOT')
remove_duplicate = FALSE
break_out = 'DIST'
sector_column = 'SECTOR'
sector_grouping = list(Sector1=c("MICRO", "TRN"), Sector2=c("CW" , "GE"), Sector3=c("TRAVEL", "VEHICLES"))
duplicate_matching_cols = c('ALEXP')#, 'DIST', 'BENTOT')
remove_duplicate = TRUE
break_out = 'DIST'
sector_column = 'SECTOR'
sector_grouping = list(Sector1=c("MICRO", "TRN"), Sector2=c("CW" , "GE"), Sector3=c("TRAVEL", "VEHICLES"))
sector_grouping
repeat_test(DigitData, duplicate_matching_cols, remove_duplicate=remove_duplicate, break_out=break_out, sector_column=sector_column, sector_grouping=sector_grouping, failure_factor=3)
duplicate_matching_cols = c('ALEXP', 'DIST', 'BENTOT')
remove_duplicate = TRUE
break_out = 'DIST'
sector_column = 'SECTOR'
sector_grouping = list(Sector1=c("MICRO", "TRN"), Sector2=c("CW" , "GE"), Sector3=c("TRAVEL", "VEHICLES"))
sector_grouping
repeat_test(DigitData, duplicate_matching_cols, remove_duplicate=remove_duplicate, break_out=break_out, sector_column=sector_column, sector_grouping=sector_grouping, failure_factor=3)
############################################################
#Tesiting; run the fucntions
#Wenjun Chang
#Summer 2020
############################################################
#############prelim############
#clear workspace
rm(list = ls())
#free up R memory
gc()
#force numerical representation rather than scientific
#options(scipen = 999)
options(scipen = 1)
options(digits = 2)
##############################
#load data input functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\data input functions.R')
#load functions for computing Benford table
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\Benford table functions.R')
#load helper functions for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all digit test helper functions.R')
#load chi square test GOF functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\chi square goodness of fit functions.R')
#load main function for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all digit test main function.R')
#load all functions for digit pair test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\digit pair test.R')
#load all functions for rounding test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\rounding test.R')
#load all functions for repeat test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\repeat test.R')
#############################################################
#############try it with given data##########################
#############################################################
#test data input and benford table functions
#load data input functions
data_columns = c("ALEXP","BENTOT", "BENM", "BENF")
fp = 'C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\ARID MASTER FINAL.csv'
DigitData = make_class(filepath = fp, col_analyzing = data_columns)
contingency_table = load_Benford_table('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\contingency_table.csv')
contingency_table
#test all digits test
digit_places = c(1)#c(1,2,3)
look_or_omit = 'look'
skip_first_figit=FALSE
omit_05 = c(0,5)
break_out='DIST'
# distribution='Benford'
# plot=TRUE
last_digit_test_included=FALSE
unpacking_rounding_column='ALEXP'
result = all_digits_test(digitdata = DigitData, contingency_table = contingency_table, data_columns = data_columns, digit_places = digit_places, look_or_omit = look_or_omit,
skip_first_figit = skip_first_figit, omit_05 = omit_05, break_out=break_out, distribution='Benford', plot=TRUE,
last_digit_test_included=FALSE, unpacking_rounding_column=unpacking_rounding_column)
#test rounding test
omit_05 = c(0,5)
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
break_out = 'DIST'
rounding_test(DigitData, data_columns, omit_05, break_out)
#test digit pair test
skip_first_figit = TRUE
last_digit_test_included = TRUE
omit_05 = NA
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
break_out = 'DIST'
digit_pairs_test(DigitData, data_columns, omit_05, skip_first_figit, last_digit_test_included, break_out)
#test repeat test
duplicate_matching_cols = c('ALEXP', 'DIST', 'BENTOT')
remove_duplicate = TRUE
break_out = 'DIST'
sector_column = 'SECTOR'
sector_grouping = list(Sector1=c("MICRO", "TRN"), Sector2=c("CW" , "GE"), Sector3=c("TRAVEL", "VEHICLES"))
# failure_factor = 3
sector_grouping
repeat_test(DigitData, duplicate_matching_cols, remove_duplicate=remove_duplicate, break_out=break_out, sector_column=sector_column, sector_grouping=sector_grouping, failure_factor=3)
#test repeat test
duplicate_matching_cols = c('ALEXP', 'DIST', 'BENTOT')
remove_duplicate = TRUE
break_out = 'DIST'
sector_column = 'SECTOR'
sector_grouping = list(Sector1=c("MICRO", "TRN"), Sector2=c("CW" , "GE"), Sector3=c("TRAVEL", "VEHICLES"))
sector_grouping
repeat_test(DigitData, duplicate_matching_cols, remove_duplicate=remove_duplicate, break_out=break_out, sector_column=sector_column, sector_grouping=sector_grouping, failure_factor=3)
#############prelim############
#clear workspace
rm(list = ls())
#free up R memory
gc()
############################################################
#Tesiting; run the fucntions
#Wenjun Chang
#Summer 2020
############################################################
#############prelim############
#clear workspace
rm(list = ls())
#free up R memory
gc()
#force numerical representation rather than scientific
#options(scipen = 999)
options(scipen = 1)
options(digits = 2)
##############################
#load data input functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\data input functions.R')
#load functions for computing Benford table
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\Benford table functions.R')
#load helper functions for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all digit test helper functions.R')
#load chi square test GOF functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\chi square goodness of fit functions.R')
#load main function for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all digit test main function.R')
#load all functions for digit pair test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\digit pair test.R')
#load all functions for rounding test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\rounding test.R')
#load all functions for repeat test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\repeat test.R')
#############################################################
#############try it with given data##########################
#############################################################
#test data input and benford table functions
#load data input functions
data_columns = c("ALEXP","BENTOT", "BENM", "BENF")
fp = 'C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\ARID MASTER FINAL.csv'
DigitData = make_class(filepath = fp, col_analyzing = data_columns)
contingency_table = load_Benford_table('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\contingency_table.csv')
contingency_table
#test all digits test
digit_places = c(1)#c(1,2,3)
look_or_omit = 'look'
skip_first_figit=FALSE
omit_05 = c(0,5)
break_out='DIST'
# distribution='Benford'
# plot=TRUE
last_digit_test_included=FALSE
unpacking_rounding_column='ALEXP'
result = all_digits_test(digitdata = DigitData, contingency_table = contingency_table, data_columns = data_columns, digit_places = digit_places, look_or_omit = look_or_omit,
skip_first_figit = skip_first_figit, omit_05 = omit_05, break_out=break_out, distribution='Benford', plot=TRUE,
last_digit_test_included=FALSE, unpacking_rounding_column=unpacking_rounding_column)
#test rounding test
omit_05 = c(0,5)
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
break_out = 'DIST'
rounding_test(DigitData, data_columns, omit_05, break_out)
#test digit pair test
skip_first_figit = TRUE
last_digit_test_included = TRUE
omit_05 = NA
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
break_out = 'DIST'
digit_pairs_test(DigitData, data_columns, omit_05, skip_first_figit, last_digit_test_included, break_out)
#test repeat test
duplicate_matching_cols = c('ALEXP', 'DIST', 'BENTOT')
remove_duplicate = TRUE
break_out = 'DIST'
sector_column = 'SECTOR'
sector_grouping = list(Sector1=c("MICRO", "TRN"), Sector2=c("CW" , "GE"), Sector3=c("TRAVEL", "VEHICLES"))
# failure_factor = 3
sector_grouping
repeat_test(DigitData, duplicate_matching_cols, remove_duplicate=remove_duplicate, break_out=break_out, sector_column=sector_column, sector_grouping=sector_grouping, failure_factor=3)
#test repeat test
duplicate_matching_cols = c('ALEXP', 'DIST', 'BENTOT')
remove_duplicate = TRUE
break_out = 'DIST'
sector_column = NA#'SECTOR'
sector_grouping = NA#list(Sector1=c("MICRO", "TRN"), Sector2=c("CW" , "GE"), Sector3=c("TRAVEL", "VEHICLES"))
sector_grouping
repeat_test(DigitData, duplicate_matching_cols, remove_duplicate=remove_duplicate, break_out=break_out, sector_column=sector_column, sector_grouping=sector_grouping, failure_factor=3)
#load all functions for repeat test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\repeat test.R')
#test repeat test
duplicate_matching_cols = c('ALEXP', 'DIST', 'BENTOT')
remove_duplicate = TRUE
break_out = 'DIST'
sector_column = NA#'SECTOR'
sector_grouping = NA#list(Sector1=c("MICRO", "TRN"), Sector2=c("CW" , "GE"), Sector3=c("TRAVEL", "VEHICLES"))
sector_grouping
repeat_test(DigitData, duplicate_matching_cols, remove_duplicate=remove_duplicate, break_out=break_out, sector_column=sector_column, sector_grouping=sector_grouping, failure_factor=3)
NA<3
############################################################
#Tesiting; run the fucntions
#Wenjun Chang
#Summer 2020
############################################################
#############prelim############
#clear workspace
rm(list = ls())
#free up R memory
gc()
#force numerical representation rather than scientific
#options(scipen = 999)
options(scipen = 1)
options(digits = 2)
##############################
#load data input functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\data input functions.R')
#load functions for computing Benford table
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\Benford table functions.R')
#load helper functions for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all digit test helper functions.R')
#load chi square test GOF functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\chi square goodness of fit functions.R')
#load main function for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all digit test main function.R')
#load all functions for digit pair test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\digit pair test.R')
#load all functions for rounding test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\rounding test.R')
#load all functions for repeat test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\repeat test.R')
#############################################################
#############try it with given data##########################
#############################################################
#test data input and benford table functions
#load data input functions
data_columns = c("ALEXP","BENTOT", "BENM", "BENF")
fp = 'C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\ARID MASTER FINAL.csv'
DigitData = make_class(filepath = fp, col_analyzing = data_columns)
contingency_table = load_Benford_table('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\contingency_table.csv')
contingency_table
#test all digits test
digit_places = c(1)#c(1,2,3)
look_or_omit = 'look'
skip_first_figit=FALSE
omit_05 = c(0,5)
break_out='DIST'
# distribution='Benford'
# plot=TRUE
last_digit_test_included=FALSE
unpacking_rounding_column='ALEXP'
result = all_digits_test(digitdata = DigitData, contingency_table = contingency_table, data_columns = data_columns, digit_places = digit_places, look_or_omit = look_or_omit,
skip_first_figit = skip_first_figit, omit_05 = omit_05, break_out=break_out, distribution='Benford', plot=TRUE,
last_digit_test_included=FALSE, unpacking_rounding_column=unpacking_rounding_column)
#test rounding test
omit_05 = c(0,5)
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
break_out = 'DIST'
rounding_test(DigitData, data_columns, omit_05, break_out)
#test digit pair test
min_length = 3
last_digit_test_included = TRUE
omit_05 = NA
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
break_out = 'DIST'
digit_pairs_test(DigitData, data_columns, omit_05, min_length, last_digit_test_included, break_out)
#test repeat test
duplicate_matching_cols = c('ALEXP', 'DIST', 'BENTOT')
remove_duplicate = TRUE
break_out = 'DIST'
sector_column = NA#'SECTOR'
sector_grouping = NA#list(Sector1=c("MICRO", "TRN"), Sector2=c("CW" , "GE"), Sector3=c("TRAVEL", "VEHICLES"))
# failure_factor = 3
sector_grouping
repeat_test(DigitData, duplicate_matching_cols, remove_duplicate=remove_duplicate, break_out=break_out, sector_column=sector_column, sector_grouping=sector_grouping, failure_factor=3)
#test digit pair test
min_length = 3
last_digit_test_included = TRUE
omit_05 = NA
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
break_out = 'DIST'
digit_pairs_test(DigitData, data_columns, omit_05, min_length, last_digit_test_included, break_out)
#load all functions for digit pair test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\digit pair test.R')
#test digit pair test
min_length = 2
last_digit_test_included = TRUE
omit_05 = NA
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
break_out = 'DIST'
digit_pairs_test(DigitData, data_columns, omit_05, min_length, last_digit_test_included, break_out)
#test digit pair test
min_length = 3
last_digit_test_included = TRUE
omit_05 = NA
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
break_out = 'DIST'
digit_pairs_test(DigitData, data_columns, omit_05, min_length, last_digit_test_included, break_out)
#test digit pair test
min_length = 1
last_digit_test_included = TRUE
omit_05 = NA
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
break_out = 'DIST'
digit_pairs_test(DigitData, data_columns, omit_05, min_length, last_digit_test_included, break_out)
#test digit pair test
min_length = NA
last_digit_test_included = TRUE
omit_05 = NA
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
break_out = 'DIST'
digit_pairs_test(DigitData, data_columns, omit_05, min_length, last_digit_test_included, break_out)
#test repeat test
duplicate_matching_cols = c('ALEXP', 'DIST', 'BENTOT')
#test digit pair test
min_length = 5
last_digit_test_included = TRUE
omit_05 = NA
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
break_out = 'DIST'
digit_pairs_test(DigitData, data_columns, omit_05, min_length, last_digit_test_included, break_out)
#test digit pair test
min_length = 3
last_digit_test_included = TRUE
omit_05 = NA
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
break_out = 'DIST'
digit_pairs_test(DigitData, data_columns, omit_05, min_length, last_digit_test_included, break_out)
