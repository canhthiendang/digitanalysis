#'   \item Defaulted to 'row'.
#' }
#'
#' @param xlab x-axis label. Defaulted to 'digits'.
#' @param ylab y-axis label. Defaulted to 'frequency'.
#' @param title Plot title. Defaulted to '2D Histogram'.
#' @param hline Specifies the y-intercept value if a horizontal line is desired. Defaulted to NA.
#'
#' @return A ggplot instance.
hist_2D = function(data, data_style='row', xlab='digits', ylab='frequency', title='2D Histogram', hline=NA){
if (data_style == 'row'){
#transpose it to column style, what ggplot wants
data = data.frame(t(data))
}
plotting_data = data.frame(x=rownames(data), y=data)
colnames(plotting_data) = c('x', 'y') #ensure col name are correct
#2d plot
library(ggplot2)
hist2d = ggplot(data=plotting_data, aes(x=x, y=y)) +
geom_bar(stat="identity") + xlab(xlab) + ylab(ylab) + ggtitle(title)
#+ geom_text(aes(label=values), vjust=-0.3, size=3.5, color='blue') #for label exact value
if (!(is.na(hline))){
#add the horizontal line desired
hist2d = hist2d + geom_hline(yintercept=hline, color='red')
}
return(hist2d)
}
#' Plot 2d histogram with multiple varibales as specified by typically the \code{break_out} in digit tests.
#' If \code{data} is row style, rownames would be the categories, and colnames would be x values.
#'
#' @param data The 2D dataframe to be plotted.
#' @inheritParams hist_2D
#'
#' @return A ggplot instance.
hist_2D_variables = function(data, data_style='row', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram'){
if (data_style == 'row'){
#transpose it to column style, what ggplot wants
data = data.frame(t(data))
}
#intialize a df for plotting, columns = x, y, category
plotting_data = data.frame(matrix(nrow = 0, ncol = 3))
colnames(plotting_data) = c('x', 'y', 'category')
#fill up df
for (name in colnames(data)){
single_category_data = data.frame(x=rownames(data), y=data[[name]], category=rep(name, nrow(data)))
plotting_data = rbind(plotting_data, single_category_data)
}
#stacked 2d barplot with multiple groups
#use position=position_dodge()
library(ggplot2)
hist2d_multiple = ggplot(data=plotting_data, aes(x=x, y=y, fill=category)) +
geom_bar(stat="identity", position=position_dodge()) + scale_x_discrete(limits=rownames(data)) +
xlab(xlab) + ylab(ylab) + ggtitle(title) #ensure order of digit places
#+ theme(legend.position="bottom") #legend position
return(hist2d_multiple)
}
#' Plot multiple plots on a single image
#'
#' @param plot_list A list of ggplot instances
#'
#' @return A plot instance with all plots in one single figure
plot_multiple_hist2d = function(plot_list){
require(gridExtra)
plots = do.call("grid.arrange", c(plot_list, nrow = floor(sqrt(length(plot_list)))))
return(plots)
}
#' Plot 2D histogram on digits freqency on each digit place in a single figure using \code{hist_2D} and \code{plot_multiple_hist2d}
#'
#' @param digits_table The digits table for counts in each digits in each digit place
#' @inheritParams hist_2D
#'
#' @return A figure with each data column's value plotted against rownames
plot_all_digit_places = function(digits_table, name='', data_style='col'){
plot_list = list()
#turn into frequency decimal
for (i in 1:length(digits_table)){
digits_table[, i] = digits_table[, i] / sum(digits_table[, i], na.rm = TRUE)
}
for (i in 1:length(digits_table)){
curr_digit_place = colnames(digits_table)[i]
hist_digit_place_i = hist_2D(digits_table[i], data_style=data_style, xlab='digits', ylab='frequency', title=paste(curr_digit_place, name), hline=NA)
plot_list[[curr_digit_place]] = hist_digit_place_i
}
plots = plot_multiple_hist2d(plot_list)
return(plots)
}
#' Plot 3D histogram. The display follows that rows will be x-axis, and columns will be y-axis.
#'
#' @param data The 2D dataframe to be plotted.
#' @param zlab z-axis label. Defaulted to 'frequency'.
#' @param theta x-y (left-right) viewing angle. Defaulted to 55.
#' @param phi xy-z (up-down) viewing angle. Defaulted to 16.
#' @inheritParams hist_2D
#' @inheritParams all_digits_test
#'
#' @return Nothing is retuned. Displays a \code{plot3D} 3d plot automatically.
hist_3d = function(data, digitdata, xlab='digits', ylab='digit places', zlab='frequency', title='3D Bar Plot', theta=55, phi=16){
#assert digitdata is of correct class
input_check(digitdata=digitdata)
#turn into frequency decimal
for (i in 1:length(data)){
data[, i] = data[, i] / sum(data[, i], na.rm = TRUE)
}
x = as.numeric(rownames(data))
y = as.numeric(which(digitdata@left_aligned_column_names %in% colnames(data)))
z = as.matrix(data)
plot_3d = plot3D::hist3D(x=x, y=y, z=z, zlim=c(0,max(z, na.rm=TRUE)+0.01), bty = "b2", theta=theta, phi=phi, axes=TRUE, label=TRUE, nticks=max(length(x),length(y)),
ticktype="detailed", space=0, expand=0.5, d=2, col='grey', colvar=NA, border='black', shade=0,
lighting=list('ambient'=0.6, 'diffuse'=0.6), main=title, xlab=xlab, ylab=ylab, zlab=zlab)
# text3D(x = 1:length(x) + 0.7, y = rep(1, length(x)), z = rep(0, length(x)),
#        labels = x, add = TRUE, adj = 0) cex.axis = 1e-100
return(plot_3d)
}
result = all_digits_test(digitdata = DigitData, contingency_table = contingency_table, data_columns = data_columns, digit_places = digit_places,
skip_first_digit = skip_first_digit, omit_05 = omit_05, break_out=break_out, distribution='Benford', plot=TRUE, skip_last_digit = skip_last_digit, standard_df=TRUE)
# library("plot3Drgl")
# plotrgl()
############################################################
#Functions for digit analysis R package
###all digit test main function in this file
#Wenjun Chang
#Summer 2020
############################################################
############################################################
#all digits test
############################################################
#' Performs all-digit-place two-way chi square test vs Benfordâ€™s Law
#'
#' @param digitdata A object of class \code{DigitAnalysis}.
#' @param contingency_table The Benford probability table.
#' @param data_columns The names of numeric columns of data to be analyzed. Default can be 'all', where using all data columns in \code{numbers} df in \code{digitdata};
#' an array of column names, as characters; a single column name, as character.
#' @param digit_places The indexes of left-aligned digit places to analyze. There are three options:
#' \itemize{
#'   \item 'all': analzye all digits. Set as default.
#'   \item An numeric array: Perform multiple digit test on the digit places desired to analyze.
#'   \item A number: Perform single digit test on the digit place desired to analyze. If last digit test is desired, pass in -1 or c(-1).
#' }
#' @param skip_first_digit TRUE or FALSE: If TRUE, skip last digit place before analysis. Default to FALSE.
#' @param omit_05 Whether to omit 0 or both 0 and 5. If omit both 0 and 5, pass in c(0,5) or c(5,0); if omit only 0 pass in 0 or c(0); if omit neither, pass in NA. Default to c(0,5).
#' @param break_out
#' \itemize{
#'   \item The data column (non-numeric!) to split up the dataset based on different categories in the column if specified as an character.
#'   \item The first division (usually x-axis) shown in plots.
#'   \item Default to NA.
#' }
#' @param distribution 'Benford' or 'Uniform'. Specifies the distribution the chi square test is testing against. Default to 'Benford'.
#' @param plot TRUE or FALSE: If TRUE, skip last digit place before analysis. Default to TRUE.
#' @param skip_last_digit TRUE or FALSE: If TRUE, skip last digit place before analysis, since we don't want tests to overlap. Default to FALSE.
#' \code{skip_last_digit} should overwrite \code{digit_places} and \code{skip_first_digits}.
#' @param standard_df TRUE or FALSE: Default to FALSE.
#'\itemize{
#'   \item TRUE: Computes degrees of freedom for chi square test using formula df = (r-1)(c-1). If table has only one column, df = r - 1.
#'   \item FALSE: Computes degrees of freedom for chi square test using df = r x (c-1). If first digit place is present, df = r x (c-1) - 1.
#' }
#'
#' @return
#' \itemize{
#'   \item A table of p-values for all digit tests on each category
#'   \item Plots for each category if \code{plot = TRUE}
#' }
#' @export
#'
#' @examples
#' all_digits_test(digitdata, contingency_table, data_columns='all', digit_places='all', skip_first_digit=TRUE)
#' all_digits_test(digitdata, contingency_table, data_columns='c(col_name1, col_name2)', digit_places=c(1,2,3,5), omit_05=NA, skip_last_digit=TRUE)
#' all_digits_test(digitdata, contingency_table, data_columns='all', digit_places=-1, omit_05=0, break_out='col_name', distribution='Uniform')
all_digits_test = function(digitdata, contingency_table, data_columns='all', digit_places='all', skip_first_digit=FALSE,
omit_05=c(0,5), break_out=NA, distribution='Benford', plot=TRUE, skip_last_digit=FALSE, standard_df=FALSE){
#check input
input_check(digitdata=digitdata, contingency_table=contingency_table, data_columns=data_columns, digit_places=digit_places,
skip_first_digit=skip_first_digit, omit_05=omit_05, break_out=break_out, distribution=distribution, plot=plot,
skip_last_digit=skip_last_digit, standard_df=standard_df)
#######################################################################
#parse the data
#######################################################################
align_direction = 'left'
#get the digits of the desired data columns to be analyzed
lst = grab_desired_aligned_columns(digitdata, data_columns, skip_first_digit, skip_last_digit, align_direction)
digitdata = lst$digitdata
digits_table = lst$digits_table
#turn 'all' to an array of numbers if digit_places is 'all'
if (digit_places[1] == 'all'){
digit_places = seq(1, digitdata@max)
if (skip_first_digit){
digit_places = seq(2, digitdata@max)
}
}
#get usable data
usable_data = parse_digit_places(digitdata, digits_table, digit_places)
#parse only needed parts of contingency table
contingency_table = parse_contigency_table(digitdata, contingency_table, digit_places, skip_first_digit, skip_last_digit, omit_05)
#get observation table from usable data
observation_table = obtain_observation(digitdata, usable_data, digit_places, skip_first_digit, skip_last_digit, omit_05)
#plot
hist_3d(observation_table, digitdata, xlab='digits', ylab='digit places', zlab='frequency', title=paste('All Digit Test', ' for All')) #3D histogram
plot=scene3d()
#return(plot)
#plot_all_digit_places(observation_table, name='All', data_style='col') #2D histograms
#######################################################################
#do chi square test
#######################################################################
df = get_df(contingency_table, standard = standard_df)
#all digit test
p_values = data.frame(all=chi_square_gof(observation_table, contingency_table, df))
#break on category if specified
if (!(is.na(break_out))){
#get indexes for each category
indexes_of_categories = break_by_category(digitdata@cleaned, break_out) #this is a list since unequal number of entries for each category
#break by category for all
for (category_name in names(indexes_of_categories)){
indexes_of_category = indexes_of_categories[[category_name]]
obs_in_category = NA
#single digit place: need to change the subsetted array into dataframe with colname
usable_in_category = data.frame(usable_data[indexes_of_category, ])
colnames(usable_in_category) = colnames(usable_data)
obs_in_category = obtain_observation(digitdata, usable_in_category, digit_places, skip_first_digit, skip_last_digit, omit_05)
#for subsets on break_out, there might be columns that are all zeros in sub-observation table
zero_columns = which(colSums(obs_in_category != 0) == 0)
if (length(zero_columns) > 0){
#remove zero columns and recompute df if necessary when getting the p values
p_values[category_name] = chi_square_gof(obs_in_category[-zero_columns], contingency_table[-zero_columns],
df=get_df(contingency_table[-zero_columns], standard=standard_df))
} else {
#do it normally
p_values[category_name] = chi_square_gof(obs_in_category, contingency_table, df)
}
#plot
hist_3d(obs_in_category, digitdata, xlab='digits', ylab='digit places', zlab='frequency', title=paste('All Digit Test', category_name))#3D histogram
# plot_all_digit_places(obs_in_category, name=category_name, data_style='col') #2D histograms
}
}
return(plot)
# print('all digit test')
# print(p_values)
return(p_values)
}
result = all_digits_test(digitdata = DigitData, contingency_table = contingency_table, data_columns = data_columns, digit_places = digit_places,
skip_first_digit = skip_first_digit, omit_05 = omit_05, break_out=break_out, distribution='Benford', plot=TRUE, skip_last_digit = skip_last_digit, standard_df=TRUE)
result
plot3d(result)
plot3d(result)
hist3d(result)
hist3D(result)
plotdev(result)
plot3d(result)
plot3d(result)
getplist(result)
getplist()
setplist(result)
result
print(result)
############################################################
#Functions for digit analysis R package
###all digit test main function in this file
#Wenjun Chang
#Summer 2020
############################################################
############################################################
#all digits test
############################################################
#' Performs all-digit-place two-way chi square test vs Benfordâ€™s Law
#'
#' @param digitdata A object of class \code{DigitAnalysis}.
#' @param contingency_table The Benford probability table.
#' @param data_columns The names of numeric columns of data to be analyzed. Default can be 'all', where using all data columns in \code{numbers} df in \code{digitdata};
#' an array of column names, as characters; a single column name, as character.
#' @param digit_places The indexes of left-aligned digit places to analyze. There are three options:
#' \itemize{
#'   \item 'all': analzye all digits. Set as default.
#'   \item An numeric array: Perform multiple digit test on the digit places desired to analyze.
#'   \item A number: Perform single digit test on the digit place desired to analyze. If last digit test is desired, pass in -1 or c(-1).
#' }
#' @param skip_first_digit TRUE or FALSE: If TRUE, skip last digit place before analysis. Default to FALSE.
#' @param omit_05 Whether to omit 0 or both 0 and 5. If omit both 0 and 5, pass in c(0,5) or c(5,0); if omit only 0 pass in 0 or c(0); if omit neither, pass in NA. Default to c(0,5).
#' @param break_out
#' \itemize{
#'   \item The data column (non-numeric!) to split up the dataset based on different categories in the column if specified as an character.
#'   \item The first division (usually x-axis) shown in plots.
#'   \item Default to NA.
#' }
#' @param distribution 'Benford' or 'Uniform'. Specifies the distribution the chi square test is testing against. Default to 'Benford'.
#' @param plot TRUE or FALSE: If TRUE, skip last digit place before analysis. Default to TRUE.
#' @param skip_last_digit TRUE or FALSE: If TRUE, skip last digit place before analysis, since we don't want tests to overlap. Default to FALSE.
#' \code{skip_last_digit} should overwrite \code{digit_places} and \code{skip_first_digits}.
#' @param standard_df TRUE or FALSE: Default to FALSE.
#'\itemize{
#'   \item TRUE: Computes degrees of freedom for chi square test using formula df = (r-1)(c-1). If table has only one column, df = r - 1.
#'   \item FALSE: Computes degrees of freedom for chi square test using df = r x (c-1). If first digit place is present, df = r x (c-1) - 1.
#' }
#'
#' @return
#' \itemize{
#'   \item A table of p-values for all digit tests on each category
#'   \item Plots for each category if \code{plot = TRUE}
#' }
#' @export
#'
#' @examples
#' all_digits_test(digitdata, contingency_table, data_columns='all', digit_places='all', skip_first_digit=TRUE)
#' all_digits_test(digitdata, contingency_table, data_columns='c(col_name1, col_name2)', digit_places=c(1,2,3,5), omit_05=NA, skip_last_digit=TRUE)
#' all_digits_test(digitdata, contingency_table, data_columns='all', digit_places=-1, omit_05=0, break_out='col_name', distribution='Uniform')
all_digits_test = function(digitdata, contingency_table, data_columns='all', digit_places='all', skip_first_digit=FALSE,
omit_05=c(0,5), break_out=NA, distribution='Benford', plot=TRUE, skip_last_digit=FALSE, standard_df=FALSE){
#check input
input_check(digitdata=digitdata, contingency_table=contingency_table, data_columns=data_columns, digit_places=digit_places,
skip_first_digit=skip_first_digit, omit_05=omit_05, break_out=break_out, distribution=distribution, plot=plot,
skip_last_digit=skip_last_digit, standard_df=standard_df)
#######################################################################
#parse the data
#######################################################################
align_direction = 'left'
#get the digits of the desired data columns to be analyzed
lst = grab_desired_aligned_columns(digitdata, data_columns, skip_first_digit, skip_last_digit, align_direction)
digitdata = lst$digitdata
digits_table = lst$digits_table
#turn 'all' to an array of numbers if digit_places is 'all'
if (digit_places[1] == 'all'){
digit_places = seq(1, digitdata@max)
if (skip_first_digit){
digit_places = seq(2, digitdata@max)
}
}
#get usable data
usable_data = parse_digit_places(digitdata, digits_table, digit_places)
#parse only needed parts of contingency table
contingency_table = parse_contigency_table(digitdata, contingency_table, digit_places, skip_first_digit, skip_last_digit, omit_05)
#get observation table from usable data
observation_table = obtain_observation(digitdata, usable_data, digit_places, skip_first_digit, skip_last_digit, omit_05)
#plot
plist= hist_3d(observation_table, digitdata, xlab='digits', ylab='digit places', zlab='frequency', title=paste('All Digit Test', ' for All')) #3D histogram
plot=setplist(plist)
#return(plot)
#plot_all_digit_places(observation_table, name='All', data_style='col') #2D histograms
#######################################################################
#do chi square test
#######################################################################
df = get_df(contingency_table, standard = standard_df)
#all digit test
p_values = data.frame(all=chi_square_gof(observation_table, contingency_table, df))
#break on category if specified
if (!(is.na(break_out))){
#get indexes for each category
indexes_of_categories = break_by_category(digitdata@cleaned, break_out) #this is a list since unequal number of entries for each category
#break by category for all
for (category_name in names(indexes_of_categories)){
indexes_of_category = indexes_of_categories[[category_name]]
obs_in_category = NA
#single digit place: need to change the subsetted array into dataframe with colname
usable_in_category = data.frame(usable_data[indexes_of_category, ])
colnames(usable_in_category) = colnames(usable_data)
obs_in_category = obtain_observation(digitdata, usable_in_category, digit_places, skip_first_digit, skip_last_digit, omit_05)
#for subsets on break_out, there might be columns that are all zeros in sub-observation table
zero_columns = which(colSums(obs_in_category != 0) == 0)
if (length(zero_columns) > 0){
#remove zero columns and recompute df if necessary when getting the p values
p_values[category_name] = chi_square_gof(obs_in_category[-zero_columns], contingency_table[-zero_columns],
df=get_df(contingency_table[-zero_columns], standard=standard_df))
} else {
#do it normally
p_values[category_name] = chi_square_gof(obs_in_category, contingency_table, df)
}
#plot
hist_3d(obs_in_category, digitdata, xlab='digits', ylab='digit places', zlab='frequency', title=paste('All Digit Test', category_name))#3D histogram
# plot_all_digit_places(obs_in_category, name=category_name, data_style='col') #2D histograms
}
}
return(plot)
# print('all digit test')
# print(p_values)
return(p_values)
}
############################################################
#Functions for digit analysis R package
###plotting helper functions
#Wenjun Chang
#Summer 2020
############################################################
#' Plot 2d histogram given data. Either rownames or colnames will be x values, and the data will be y values.
#'
#' @param data The 1D dataframe to be plotted.
#' @param data_style The style of input \code{data}. \code{ggplot} requires columns to be the arrays for x values, y values, etc.
#' \itemize{
#'   \item If \code{data} has a row for y values, pass in 'row'.
#'   \item If \code{data} has a column for y values, pass in 'col'.
#'   \item Defaulted to 'row'.
#' }
#'
#' @param xlab x-axis label. Defaulted to 'digits'.
#' @param ylab y-axis label. Defaulted to 'frequency'.
#' @param title Plot title. Defaulted to '2D Histogram'.
#' @param hline Specifies the y-intercept value if a horizontal line is desired. Defaulted to NA.
#'
#' @return A ggplot instance.
hist_2D = function(data, data_style='row', xlab='digits', ylab='frequency', title='2D Histogram', hline=NA){
if (data_style == 'row'){
#transpose it to column style, what ggplot wants
data = data.frame(t(data))
}
plotting_data = data.frame(x=rownames(data), y=data)
colnames(plotting_data) = c('x', 'y') #ensure col name are correct
#2d plot
library(ggplot2)
hist2d = ggplot(data=plotting_data, aes(x=x, y=y)) +
geom_bar(stat="identity") + xlab(xlab) + ylab(ylab) + ggtitle(title)
#+ geom_text(aes(label=values), vjust=-0.3, size=3.5, color='blue') #for label exact value
if (!(is.na(hline))){
#add the horizontal line desired
hist2d = hist2d + geom_hline(yintercept=hline, color='red')
}
return(hist2d)
}
#' Plot 2d histogram with multiple varibales as specified by typically the \code{break_out} in digit tests.
#' If \code{data} is row style, rownames would be the categories, and colnames would be x values.
#'
#' @param data The 2D dataframe to be plotted.
#' @inheritParams hist_2D
#'
#' @return A ggplot instance.
hist_2D_variables = function(data, data_style='row', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram'){
if (data_style == 'row'){
#transpose it to column style, what ggplot wants
data = data.frame(t(data))
}
#intialize a df for plotting, columns = x, y, category
plotting_data = data.frame(matrix(nrow = 0, ncol = 3))
colnames(plotting_data) = c('x', 'y', 'category')
#fill up df
for (name in colnames(data)){
single_category_data = data.frame(x=rownames(data), y=data[[name]], category=rep(name, nrow(data)))
plotting_data = rbind(plotting_data, single_category_data)
}
#stacked 2d barplot with multiple groups
#use position=position_dodge()
library(ggplot2)
hist2d_multiple = ggplot(data=plotting_data, aes(x=x, y=y, fill=category)) +
geom_bar(stat="identity", position=position_dodge()) + scale_x_discrete(limits=rownames(data)) +
xlab(xlab) + ylab(ylab) + ggtitle(title) #ensure order of digit places
#+ theme(legend.position="bottom") #legend position
return(hist2d_multiple)
}
#' Plot multiple plots on a single image
#'
#' @param plot_list A list of ggplot instances
#'
#' @return A plot instance with all plots in one single figure
plot_multiple_hist2d = function(plot_list){
require(gridExtra)
plots = do.call("grid.arrange", c(plot_list, nrow = floor(sqrt(length(plot_list)))))
return(plots)
}
#' Plot 2D histogram on digits freqency on each digit place in a single figure using \code{hist_2D} and \code{plot_multiple_hist2d}
#'
#' @param digits_table The digits table for counts in each digits in each digit place
#' @inheritParams hist_2D
#'
#' @return A figure with each data column's value plotted against rownames
plot_all_digit_places = function(digits_table, name='', data_style='col'){
plot_list = list()
#turn into frequency decimal
for (i in 1:length(digits_table)){
digits_table[, i] = digits_table[, i] / sum(digits_table[, i], na.rm = TRUE)
}
for (i in 1:length(digits_table)){
curr_digit_place = colnames(digits_table)[i]
hist_digit_place_i = hist_2D(digits_table[i], data_style=data_style, xlab='digits', ylab='frequency', title=paste(curr_digit_place, name), hline=NA)
plot_list[[curr_digit_place]] = hist_digit_place_i
}
plots = plot_multiple_hist2d(plot_list)
return(plots)
}
#' Plot 3D histogram. The display follows that rows will be x-axis, and columns will be y-axis.
#'
#' @param data The 2D dataframe to be plotted.
#' @param zlab z-axis label. Defaulted to 'frequency'.
#' @param theta x-y (left-right) viewing angle. Defaulted to 55.
#' @param phi xy-z (up-down) viewing angle. Defaulted to 16.
#' @inheritParams hist_2D
#' @inheritParams all_digits_test
#'
#' @return Nothing is retuned. Displays a \code{plot3D} 3d plot automatically.
hist_3d = function(data, digitdata, xlab='digits', ylab='digit places', zlab='frequency', title='3D Bar Plot', theta=55, phi=16){
#assert digitdata is of correct class
input_check(digitdata=digitdata)
#turn into frequency decimal
for (i in 1:length(data)){
data[, i] = data[, i] / sum(data[, i], na.rm = TRUE)
}
x = as.numeric(rownames(data))
y = as.numeric(which(digitdata@left_aligned_column_names %in% colnames(data)))
z = as.matrix(data)
plot_3d = plot3D::hist3D(x=x, y=y, z=z, zlim=c(0,max(z, na.rm=TRUE)+0.01), bty = "b2", theta=theta, phi=phi, axes=TRUE, label=TRUE, nticks=max(length(x),length(y)),
ticktype="detailed", space=0, expand=0.5, d=2, col='grey', colvar=NA, border='black', shade=0,
lighting=list('ambient'=0.6, 'diffuse'=0.6), main=title, xlab=xlab, ylab=ylab, zlab=zlab)
# text3D(x = 1:length(x) + 0.7, y = rep(1, length(x)), z = rep(0, length(x)),
#        labels = x, add = TRUE, adj = 0) cex.axis = 1e-100
return(plot_3d)
}
result = all_digits_test(digitdata = DigitData, contingency_table = contingency_table, data_columns = data_columns, digit_places = digit_places,
skip_first_digit = skip_first_digit, omit_05 = omit_05, break_out=break_out, distribution='Benford', plot=TRUE, skip_last_digit = skip_last_digit, standard_df=TRUE)
# library("plot3Drgl")
# plotrgl()
result
getplist()
plotdev()
plotdev()''
plotdev()''
plotdev()
result = all_digits_test(digitdata = DigitData, contingency_table = contingency_table, data_columns = data_columns, digit_places = digit_places,
skip_first_digit = skip_first_digit, omit_05 = omit_05, break_out=break_out, distribution='Benford', plot=TRUE, skip_last_digit = skip_last_digit, standard_df=TRUE)
result
plotdev()
