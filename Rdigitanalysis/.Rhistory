for (i in 1:length(col_analyzing)) {
#name of current data column modifying
col_name = col_analyzing[i]
#update by 'align_left' or 'align_right'
aligned_data = align_digits(indata=cleaned_data[[col_name]], outdata=aligned_data, naming_method=naming_method, align_direction=align_direction, colname=col_name)
}
return(aligned_data)
}
###parse and clean the data for digit analysis
###col_analyzing can be specified as any of numeric_data='sdfsfsf' or numeric_data=c('dsdfsfsf') or numeric_data=c('dsdfsfsf',...)
make_class = function(filepath, col_analyzing){
#data format: row is observation; column is category; must be csv!!!
#raw input data->'raw' of the class
raw_data = read.csv(filepath)
#hard-coded way of naming the digit places, should be sufficient, if not can further add
left_aligned_column_names = c('1st digit', '2nd digit', '3rd digit', '4th digit', '5th digit', '6th digit', '7th digit',
'8th digit', '9th digit', '10th digit', '11th digit', '12th digit', '13th digit')
right_aligned_column_names = c('1s', '10s', '100s', '1k', '10k', '100k', '1m', '10m', '100m', '1b', '10b', '100b', '1t')
########################creation of all sub-objects########################
cleaned_data = make_cleaned_data(raw_data, col_analyzing)
numeric_data = make_numeric_data(cleaned_data, col_analyzing)
#the dataframe with the left aligned digits of each data column to be analyzed->'left_aligned' of the class
#i.e. a column is 'X'; first digit will be at column '1st digit' + 'X'
left_aligned_data = make_aligned_data(cleaned_data, col_analyzing, naming_method=left_aligned_column_names, align_direction='left')
#the dataframe with the right aligned digits of each data column to be analyzed->'right_aligned' of the class
#i.e. a column is 'X'; first digit will be at column '1s' + 'X'
right_aligned_data = make_aligned_data(cleaned_data, col_analyzing, naming_method=right_aligned_column_names, align_direction='right')
########################creation of DigitAnalysis class object########################
DigitData = DigitAnalysis(raw = raw_data, cleaned = cleaned_data, numbers=numeric_data, left_aligned=left_aligned_data, right_aligned=right_aligned_data)
return(DigitData)
}
#gives the table for the left/right aligned table for a single numeric data column
#digitdata is an object of the class DigitAnalysis!
#desired_col should be a string!
match('BENF',colnames(DigitData@numbers))
single_column_aligned = function(digitdata, desired_col, align_diretion='left') {
if (is.na(match(desired_col, colnames(digitdata@numbers)))){
#throw error (need modify better later)
stop(sprintf("%s is not a numerical data column in object %s", desired_col, digitdata))
} else {
#add a space at the end to avoid picking up alternative superstring column names
checking = paste(desired_col, '')
if (align_diretion == 'left') {
original_df = data.frame(DigitData@left_aligned)
}
else if (align_diretion == 'right') {
original_df = data.frame(DigitData@right_aligned)
}
else {
stop("align_direction must be either 'left' or 'right'")
}
#create output table
single_align_df = data.frame(matrix(ncol = 0, nrow = length(original_df[,1])))
column_names = colnames(original_df)
for (i in 1:length(column_names)){
if (grepl(checking, column_names[i], fixed=TRUE)){
print('s')
single_align_df[[column_names[i]]] = NA
single_align_df[[column_names[i]]] = original_df[[column_names[i]]]
}
}
return(single_align_df)
}
}
#############try it with given data
data_columns = c("ALEXP","BENTOT", "BENM", "BENF")
fp = 'C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\ARID MASTER FINAL.csv'
DigitData = make_class(filepath = fp, col_analyzing = data_columns)
#gives the table for the left/right aligned table for a single numeric data column
#digitdata is an object of the class DigitAnalysis!
#desired_col should be a string!
match('BENF',colnames(DigitData@numbers))
single_column_aligned = function(digitdata, desired_col, align_diretion='left') {
if (is.na(match(desired_col, colnames(digitdata@numbers)))){
#throw error (need modify better later)
stop(sprintf("%s is not a numerical data column in object %s", desired_col, digitdata))
} else {
#add a space at the end to avoid picking up alternative superstring column names
checking = paste(desired_col, '')
original_df = NA
if (align_diretion == 'left') {
original_df = data.frame(DigitData@left_aligned)
}
else if (align_diretion == 'right') {
original_df = data.frame(DigitData@right_aligned)
}
else {
stop("align_direction must be either 'left' or 'right'")
}
#create output table
single_align_df = data.frame(matrix(ncol = 0, nrow = length(original_df[,1])))
print(dim(single_align_df), dim(original_df))
column_names = colnames(original_df)
print(column_names)
for (i in 1:length(column_names)){
if (grepl(checking, column_names[i], fixed=TRUE)){
print('s')
single_align_df[[column_names[i]]] = NA
single_align_df[[column_names[i]]] = original_df[[column_names[i]]]
}
}
return(single_align_df)
}
}
single_column_aligned(DigitData, "BENF", 'left')
single_column_aligned(DigitData, "BENF", 'left')
single_column_aligned = function(digitdata, desired_col, align_diretion='left') {
if (is.na(match(desired_col, colnames(digitdata@numbers)))){
#throw error (need modify better later)
stop(sprintf("%s is not a numerical data column in object %s", desired_col, digitdata))
} else {
#add a space at the end to avoid picking up alternative superstring column names
checking = paste(desired_col, '')
original_df = NA
if (align_diretion == 'left') {
original_df = data.frame(DigitData@left_aligned)
}
else if (align_diretion == 'right') {
original_df = data.frame(DigitData@right_aligned)
}
else {
stop("align_direction must be either 'left' or 'right'")
}
print(original_df)
#create output table
single_align_df = data.frame(matrix(ncol = 0, nrow = length(original_df[,1])))
print(dim(single_align_df), dim(original_df))
column_names = colnames(original_df)
print(column_names)
for (i in 1:length(column_names)){
if (grepl(checking, column_names[i], fixed=TRUE)){
print('s')
single_align_df[[column_names[i]]] = NA
single_align_df[[column_names[i]]] = original_df[[column_names[i]]]
}
}
return(single_align_df)
}
}
single_column_aligned(DigitData, "BENF", 'left')
length(original_df[,1])
single_column_aligned(DigitData, "BENF", 'left')
print(dim(original_df))
single_column_aligned = function(digitdata, desired_col, align_diretion='left') {
if (is.na(match(desired_col, colnames(digitdata@numbers)))){
#throw error (need modify better later)
stop(sprintf("%s is not a numerical data column in object %s", desired_col, digitdata))
} else {
#add a space at the end to avoid picking up alternative superstring column names
checking = paste(desired_col, '')
original_df = NA
if (align_diretion == 'left') {
original_df = data.frame(DigitData@left_aligned)
}
else if (align_diretion == 'right') {
original_df = data.frame(DigitData@right_aligned)
}
else {
stop("align_direction must be either 'left' or 'right'")
}
print(original_df, dim(original_df),length(original_df[,1]) )
#create output table
single_align_df = data.frame(matrix(ncol = 0, nrow = length(original_df[,1])))
print(dim(single_align_df), dim(original_df))
column_names = colnames(original_df)
print(column_names)
for (i in 1:length(column_names)){
if (grepl(checking, column_names[i], fixed=TRUE)){
print('s')
single_align_df[[column_names[i]]] = NA
single_align_df[[column_names[i]]] = original_df[[column_names[i]]]
}
}
return(single_align_df)
}
}
single_column_aligned(DigitData, "BENF", 'left')
align_diretion == 'left'
if (is.na(match("BENF", colnames(DigitData@numbers)))){
#throw error (need modify better later)
stop(sprintf("%s is not a numerical data column in object %s", "BENF", as.character(DigitData)))
} else {
#add a space at the end to avoid picking up alternative superstring column names
checking = paste("BENF", '')
original_df = NA
if (align_diretion == 'left') {
original_df = data.frame(DigitData@left_aligned)
}
else if (align_diretion == 'right') {
original_df = data.frame(DigitData@right_aligned)
}
else {
stop("align_direction must be either 'left' or 'right'")
}
print(original_df, dim(original_df),length(original_df[,1]) )
#create output table
single_align_df = data.frame(matrix(ncol = 0, nrow = length(original_df[,1])))
print(dim(single_align_df), dim(original_df))
column_names = colnames(original_df)
print(column_names)
for (i in 1:length(column_names)){
if (grepl(checking, column_names[i], fixed=TRUE)){
print('s')
single_align_df[[column_names[i]]] = NA
single_align_df[[column_names[i]]] = original_df[[column_names[i]]]
}
}
}
align_direction = 'left'
if (is.na(match("BENF", colnames(DigitData@numbers)))){
#throw error (need modify better later)
stop(sprintf("%s is not a numerical data column in object %s", "BENF", as.character(DigitData)))
} else {
#add a space at the end to avoid picking up alternative superstring column names
checking = paste("BENF", '')
original_df = NA
if (align_direction == 'left') {
original_df = data.frame(DigitData@left_aligned)
}
else if (align_direction == 'right') {
original_df = data.frame(DigitData@right_aligned)
}
else {
stop("align_direction must be either 'left' or 'right'")
}
print(original_df, dim(original_df),length(original_df[,1]) )
#create output table
single_align_df = data.frame(matrix(ncol = 0, nrow = length(original_df[,1])))
print(dim(single_align_df), dim(original_df))
column_names = colnames(original_df)
print(column_names)
for (i in 1:length(column_names)){
if (grepl(checking, column_names[i], fixed=TRUE)){
print('s')
single_align_df[[column_names[i]]] = NA
single_align_df[[column_names[i]]] = original_df[[column_names[i]]]
}
}
}
original_df
dim(original_df)
length(original_df[,1])
single_align_df = data.frame(matrix(ncol = 0, nrow = length(original_df[,1])))
single_align_df
align_direction = 'left'
if (is.na(match("BENF", colnames(DigitData@numbers)))){
#throw error (need modify better later)
stop(sprintf("%s is not a numerical data column in object %s", "BENF", as.character(DigitData)))
} else {
#add a space at the end to avoid picking up alternative superstring column names
checking = paste("BENF", '')
original_df = NA
if (align_direction == 'left') {
original_df = data.frame(DigitData@left_aligned)
}
else if (align_direction == 'right') {
original_df = data.frame(DigitData@right_aligned)
}
else {
stop("align_direction must be either 'left' or 'right'")
}
print(original_df, dim(original_df),length(original_df[,1]) )
#create output table
single_align_df = data.frame(matrix(ncol = 0, nrow = length(original_df[,1])))
print(dim(single_align_df))
column_names = colnames(original_df)
print(column_names)
for (i in 1:length(column_names)){
if (grepl(checking, column_names[i], fixed=TRUE)){
print('s')
single_align_df[[column_names[i]]] = NA
single_align_df[[column_names[i]]] = original_df[[column_names[i]]]
}
}
}
single_align_df
align_direction = 'left'
if (is.na(match("BENF", colnames(DigitData@numbers)))){
#throw error (need modify better later)
stop(sprintf("%s is not a numerical data column in object %s", "BENF", as.character(DigitData)))
} else {
#add a space at the end to avoid picking up alternative superstring column names
checking = paste("BENF", '')
original_df = NA
if (align_direction == 'left') {
original_df = data.frame(DigitData@left_aligned)
}
else if (align_direction == 'right') {
original_df = data.frame(DigitData@right_aligned)
}
else {
stop("align_direction must be either 'left' or 'right'")
}
#create output table
single_align_df = data.frame(matrix(ncol = 0, nrow = length(original_df[,1])))
print(dim(single_align_df))
column_names = colnames(original_df)
print(column_names)
for (i in 1:length(column_names)){
if (grepl(checking, column_names[i], fixed=TRUE)){
print('s')
single_align_df[[column_names[i]]] = NA
single_align_df[[column_names[i]]] = original_df[[column_names[i]]]
}
}
}
colnames(DigitData@right_aligned)
colnames(DigitData@left_aligned)
column_names
original_df
colnames(ooriginal_df)
colnames(original_df)
align_direction = 'left'
if (is.na(match("BENF", colnames(DigitData@numbers)))){
#throw error (need modify better later)
stop(sprintf("%s is not a numerical data column in object %s", "BENF", as.character(DigitData)))
} else {
#add a space at the end to avoid picking up alternative superstring column names
checking = paste("BENF", '')
original_df = NA
if (align_direction == 'left') {
original_df = DigitData@left_aligned
}
else if (align_direction == 'right') {
original_df = DigitData@right_aligned
}
else {
stop("align_direction must be either 'left' or 'right'")
}
#create output table
single_align_df = data.frame(matrix(ncol = 0, nrow = length(original_df[,1])))
print(dim(single_align_df))
column_names = colnames(original_df)
print(column_names)
for (i in 1:length(column_names)){
if (grepl(checking, column_names[i], fixed=TRUE)){
print('s')
single_align_df[[column_names[i]]] = NA
single_align_df[[column_names[i]]] = original_df[[column_names[i]]]
}
}
}
single_column_aligned = function(digitdata, desired_col, align_diretion='left') {
if (is.na(match(desired_col, colnames(digitdata@numbers)))){
#throw error (need modify better later)
stop(sprintf("%s is not a numerical data column in object %s", desired_col, as.character(digitdata)))
} else {
#add a space at the end to avoid picking up alternative superstring column names
checking = paste(desired_col, '')
original_df = NA
if (align_diretion == 'left') {
original_df = data.frame(DigitData@left_aligned)
}
else if (align_diretion == 'right') {
original_df = data.frame(DigitData@right_aligned)
}
else {
stop("align_direction must be either 'left' or 'right'")
}
#create output table
single_align_df = data.frame(matrix(ncol = 0, nrow = length(original_df[,1])))
print(dim(single_align_df))
column_names = colnames(original_df)
print(column_names)
for (i in 1:length(column_names)){
if (grepl(checking, column_names[i], fixed=TRUE)){
print('s')
single_align_df[[column_names[i]]] = NA
single_align_df[[column_names[i]]] = original_df[[column_names[i]]]
}
}
return(single_align_df)
}
}
single_column_aligned(DigitData, "BENF", 'left')
single_column_aligned = function(digitdata, desired_col, align_diretion='left') {
if (is.na(match(desired_col, colnames(digitdata@numbers)))){
#throw error (need modify better later)
stop(sprintf("%s is not a numerical data column in object %s", desired_col, as.character(digitdata)))
} else {
#add a space at the end to avoid picking up alternative superstring column names
checking = paste(desired_col, '')
original_df = NA
if (align_diretion == 'left') {
original_df = DigitData@left_aligned
}
else if (align_diretion == 'right') {
original_df = DigitData@right_aligned
}
else {
stop("align_direction must be either 'left' or 'right'")
}
#create output table
single_align_df = data.frame(matrix(ncol = 0, nrow = length(original_df[,1])))
print(dim(single_align_df))
column_names = colnames(original_df)
print(column_names)
for (i in 1:length(column_names)){
if (grepl(checking, column_names[i], fixed=TRUE)){
print('s')
single_align_df[[column_names[i]]] = NA
single_align_df[[column_names[i]]] = original_df[[column_names[i]]]
}
}
return(single_align_df)
}
}
single_column_aligned(DigitData, "BENF", 'left')
a=single_column_aligned(DigitData, "BENF", 'right')
head(a,5)
a=single_column_aligned(DigitData, "BENF", 'sdfsfs')
a=single_column_aligned(DigitData, "BENF", 'sdfsfs')
a=single_column_aligned(DigitData, "sdfsf", 'left')
single_column_aligned = function(digitdata, desired_col, align_diretion='left') {
if (is.na(match(desired_col, colnames(digitdata@numbers)))){
#throw error (need modify better later)
stop('fdsfdsf')
stop(sprintf("%s is not a numerical data column in object %s", desired_col, as.character(digitdata)))
} else {
#add a space at the end to avoid picking up alternative superstring column names
checking = paste(desired_col, '')
original_df = NA
if (align_diretion == 'left') {
original_df = DigitData@left_aligned
}
else if (align_diretion == 'right') {
original_df = DigitData@right_aligned
}
else {
stop("align_direction must be either 'left' or 'right'")
}
#create output table
single_align_df = data.frame(matrix(ncol = 0, nrow = length(original_df[,1])))
print(dim(single_align_df))
column_names = colnames(original_df)
print(column_names)
for (i in 1:length(column_names)){
if (grepl(checking, column_names[i], fixed=TRUE)){
print('s')
single_align_df[[column_names[i]]] = NA
single_align_df[[column_names[i]]] = original_df[[column_names[i]]]
}
}
return(single_align_df)
}
}
a=single_column_aligned(DigitData, "sdfsf", 'left')
single_column_aligned = function(digitdata, desired_col, align_diretion='left') {
if (is.na(match(desired_col, colnames(digitdata@numbers)))){
#throw error
stop("Specified desired_col is not a numerical data column in the specified DigitAnalysis class object")
} else {
#add a space at the end to avoid picking up alternative superstring column names
checking = paste(desired_col, '')
original_df = NA
if (align_diretion == 'left') {
original_df = DigitData@left_aligned
}
else if (align_diretion == 'right') {
original_df = DigitData@right_aligned
}
else {
stop("align_direction must be either 'left' or 'right'")
}
#create output table
single_align_df = data.frame(matrix(ncol = 0, nrow = length(original_df[,1])))
print(dim(single_align_df))
column_names = colnames(original_df)
print(column_names)
for (i in 1:length(column_names)){
if (grepl(checking, column_names[i], fixed=TRUE)){
print('s')
single_align_df[[column_names[i]]] = NA
single_align_df[[column_names[i]]] = original_df[[column_names[i]]]
}
}
return(single_align_df)
}
}
a=single_column_aligned(DigitData, "sdfsf", 'left')
single_column_aligned = function(digitdata, desired_col, align_diretion='left') {
if (is.na(match(desired_col, colnames(digitdata@numbers)))){
#throw error
stop("Specified desired_col is not a numerical data column in the specified DigitAnalysis class object")
} else {
#add a space at the end to avoid picking up alternative superstring column names
checking = paste(desired_col, '')
original_df = NA
if (align_diretion == 'left') {
original_df = DigitData@left_aligned
}
else if (align_diretion == 'right') {
original_df = DigitData@right_aligned
}
else {
stop("align_direction must be either 'left' or 'right'")
}
#create output table
single_align_df = data.frame(matrix(ncol = 0, nrow = length(original_df[,1])))
column_names = colnames(original_df)
for (i in 1:length(column_names)){
if (grepl(checking, column_names[i], fixed=TRUE)){
print('s')
single_align_df[[column_names[i]]] = NA
single_align_df[[column_names[i]]] = original_df[[column_names[i]]]
}
}
return(single_align_df)
}
}
a=single_column_aligned(DigitData, "ALEXP", 'left')
head(a,5)
