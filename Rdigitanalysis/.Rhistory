#load helper functions for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all digit test helper functions.R')
#load chi square test GOF functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\chi square goodness of fit functions.R')
#load main function for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all digit test main function.R')
#load all functions for digit pair test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\digit pair test.R')
#load all functions for rounding test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\rounding test.R')
#load all functions for repeat test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\repeat test.R')
#############################################################
#############try it with given data##########################
#############################################################
#test data input and benford table functions
#load data input functions
data_columns = c("ALEXP","BENTOT", "BENM", "BENF")
fp = 'C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\ARID MASTER FINAL.csv'
DigitData = make_class(filepath = fp, col_analyzing = data_columns)
contingency_table = load_Benford_table('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\contingency_table.csv')
contingency_table
#test all digits test
digit_places = c(1)#c(1,2,3)
look_or_omit = 'look'
skip_first_figit=FALSE
omit_05 = c(0,5)
break_out='DIST'
# distribution='Benford'
# plot=TRUE
last_digit_test_included=FALSE
unpacking_rounding_column='ALEXP'
result = all_digits_test(digitdata = DigitData, contingency_table = contingency_table, data_columns = data_columns, digit_places = digit_places, look_or_omit = look_or_omit,
skip_first_figit = skip_first_figit, omit_05 = omit_05, break_out=break_out, distribution='Benford', plot=TRUE,
last_digit_test_included=FALSE, unpacking_rounding_column=unpacking_rounding_column)
result = all_digits_test(digitdata = DigitData, contingency_table = contingency_table, data_columns = data_columns, digit_places = digit_places, look_or_omit = look_or_omit,
skip_first_figit = skip_first_figit, omit_05 = omit_05, break_out=break_out, distribution='Benford', plot=TRUE,
last_digit_test_included=FALSE, unpacking_rounding_column=unpacking_rounding_column)
result = all_digits_test(digitdata = DigitData, contingency_table = contingency_table, data_columns = data_columns, digit_places = digit_places, look_or_omit = look_or_omit,
skip_first_figit = skip_first_figit, omit_05 = omit_05, break_out=break_out, distribution='Benford', plot=TRUE,
last_digit_test_included=FALSE, unpacking_rounding_column=unpacking_rounding_column)
unpacking_rounding_column=NA#'ALEXP'
result = all_digits_test(digitdata = DigitData, contingency_table = contingency_table, data_columns = data_columns, digit_places = digit_places, look_or_omit = look_or_omit,
skip_first_figit = skip_first_figit, omit_05 = omit_05, break_out=break_out, distribution='Benford', plot=TRUE,
last_digit_test_included=FALSE, unpacking_rounding_column=unpacking_rounding_column)
break_out=NA#'DIST'
# distribution='Benford'
# plot=TRUE
last_digit_test_included=FALSE
unpacking_rounding_column='ALEXP'
result = all_digits_test(digitdata = DigitData, contingency_table = contingency_table, data_columns = data_columns, digit_places = digit_places, look_or_omit = look_or_omit,
skip_first_figit = skip_first_figit, omit_05 = omit_05, break_out=break_out, distribution='Benford', plot=TRUE,
last_digit_test_included=FALSE, unpacking_rounding_column=unpacking_rounding_column)
unpacking_rounding_column=NA#'ALEXP'
result = all_digits_test(digitdata = DigitData, contingency_table = contingency_table, data_columns = data_columns, digit_places = digit_places, look_or_omit = look_or_omit,
skip_first_figit = skip_first_figit, omit_05 = omit_05, break_out=break_out, distribution='Benford', plot=TRUE,
last_digit_test_included=FALSE, unpacking_rounding_column=unpacking_rounding_column)
break_out='DIST'
# distribution='Benford'
# plot=TRUE
last_digit_test_included=FALSE
unpacking_rounding_column='ALEXP'
result = all_digits_test(digitdata = DigitData, contingency_table = contingency_table, data_columns = data_columns, digit_places = digit_places, look_or_omit = look_or_omit,
skip_first_figit = skip_first_figit, omit_05 = omit_05, break_out=break_out, distribution='Benford', plot=TRUE,
last_digit_test_included=FALSE, unpacking_rounding_column=unpacking_rounding_column)
a=DigitData@cleaned[["ALEXP"]]
a
a[!(is.na(a))]
(is.na(a))
b=a[!(is.na(a))]
floor(log10(data[i]))+1
floor(log10(b))+1
max(floor(log10(b))+1)
complete.cases(DigitData@raw)
a
c
d
a=data.frame(a=1,b=2)
a[c('a','b')]
############################################################
#Tesiting; run the fucntions
#Wenjun Chang
#Summer 2020
############################################################
#############prelim############
#clear workspace
rm(list = ls())
#free up R memory
gc()
#force numerical representation rather than scientific
#options(scipen = 999)
options(scipen = 1)
options(digits = 2)
##############################
#load data input functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\data input functions.R')
#load functions for computing Benford table
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\Benford table functions.R')
#load helper functions for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all digit test helper functions.R')
#load chi square test GOF functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\chi square goodness of fit functions.R')
#load main function for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all digit test main function.R')
#load all functions for digit pair test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\digit pair test.R')
#load all functions for rounding test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\rounding test.R')
#load all functions for repeat test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\repeat test.R')
#############################################################
#############try it with given data##########################
#############################################################
#test data input and benford table functions
#load data input functions
data_columns = c("ALEXP","BENTOT", "BENM", "BENF")
fp = 'C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\ARID MASTER FINAL.csv'
DigitData = make_class(filepath = fp, col_analyzing = data_columns)
contingency_table = load_Benford_table('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\contingency_table.csv')
contingency_table
#test all digits test
digit_places = c(1)#c(1,2,3)
look_or_omit = 'look'
skip_first_figit=FALSE
omit_05 = c(0,5)
break_out='DIST'
# distribution='Benford'
# plot=TRUE
last_digit_test_included=FALSE
unpacking_rounding_column='ALEXP'
result = all_digits_test(digitdata = DigitData, contingency_table = contingency_table, data_columns = data_columns, digit_places = digit_places, look_or_omit = look_or_omit,
skip_first_figit = skip_first_figit, omit_05 = omit_05, break_out=break_out, distribution='Benford', plot=TRUE,
last_digit_test_included=FALSE, unpacking_rounding_column=unpacking_rounding_column)
#test rounding test
omit_05 = c(0,5)
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
break_out = 'DIST'
rounding_test(DigitData, data_columns, omit_05, break_out)
#test digit pair test
min_length = 3
last_digit_test_included = TRUE
omit_05 = NA
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
break_out = 'DIST'
digit_pairs_test(DigitData, data_columns, omit_05, min_length, last_digit_test_included, break_out)
#test repeat test
duplicate_matching_cols = c('ALEXP', 'DIST', 'BENTOT')
remove_duplicate = TRUE
break_out = 'DIST'
sector_column = NA#'SECTOR'
sector_grouping = NA#list(Sector1=c("MICRO", "TRN"), Sector2=c("CW" , "GE"), Sector3=c("TRAVEL", "VEHICLES"))
# failure_factor = 3
sector_grouping
repeat_test(DigitData, duplicate_matching_cols, remove_duplicate=remove_duplicate, break_out=break_out, sector_column=sector_column, sector_grouping=sector_grouping, failure_factor=3)
############################################################
#Functions for digit analysis R package
###high to low digit test functions in this file
#Wenjun Chang
#Summer 2020
############################################################
#############prelim############
#clear workspace
rm(list = ls())
#free up R memory
gc()
#force numerical representation rather than scientific
#options(scipen = 999)
options(scipen = 1)
options(digits = 2)
##############################
#load data input functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\data input functions.R')
#load functions for computing Benford table
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\Benford table functions.R')
#load helper functions for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all digit test helper functions.R')
#load chi square test GOF functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\chi square goodness of fit functions.R')
#load main function for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all digit test main function.R')
#load all functions for digit pair test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\digit pair test.R')
#load all functions for rounding test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\rounding test.R')
#load all functions for repeat test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\repeat test.R')
#test data input and benford table functions
#load data input functions
data_columns = c("ALEXP","BENTOT", "BENM", "BENF")
fp = 'C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\ARID MASTER FINAL.csv'
DigitData = make_class(filepath = fp, col_analyzing = data_columns)
contingency_table = load_Benford_table('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\contingency_table.csv')
contingency_table
DigitData@cleaned[["DIST"]]
DigitData@cleaned["DIST"]
single_column_aligned(DigitData, "ALEXP", 'left')
table(single_column_aligned(DigitData, "ALEXP", 'left'))
data = single_column_aligned(DigitData, "ALEXP", 'left')
data
print(TABLE(data[digit_place]))
for (digit_place in colnames(data)){
print(TABLE(data[digit_place]))
}
data = single_column_aligned(DigitData, "ALEXP", 'left')
for (digit_place in colnames(data)){
print(table(data[digit_place]))
}
print(digit_place)
print(table(data[digit_place]))
for (digit_place in colnames(data)){
print(digit_place)
print(table(data[digit_place]))
}
high = c('6', '7', '8', '9')
data = single_column_aligned(DigitData, "ALEXP", 'left')
#i is the ith digit place always since it is from the left
for (i in 1:length(data)){
#get frequency of each digit in each digit place
freq_obs = table(data[i])
print(freq)
#get freqency of high and low digit places
high_low_freq_obs = freq_obs[high]
print(high_low_freq_obs)
}
data = single_column_aligned(DigitData, "ALEXP", 'left')
#i is the ith digit place always since it is from the left
for (i in 1:length(data)){
#get frequency of each digit in each digit place
freq_obs = table(data[i])
print(freq_obs)
#get freqency of high and low digit places
high_low_freq_obs = freq_obs[high]
print(high_low_freq_obs)
}
#i is the ith digit place always since it is from the left
for (i in 1:length(data)){
#get frequency of each digit in each digit place
freq_obs = table(data[i])
print(freq_obs)
#get freqency of high and low digit places
high_low_freq_obs = freq_obs[high]
print(high_low_freq_obs)
print(sum(high_low_freq_obs))
}
omit_05 = c(0, 5)
data = single_column_aligned(DigitData, "ALEXP", 'left')
#i is the ith digit place always since it is from the left
for (i in 1:length(data)){
#get frequency of each digit in each digit place
counts_obs = table(data[i])
counts_obs = counts_obs[-omit_05]
print(counts_obs)
#get freqency of high and low digit places
high_low_counts_obs = counts_obs[high]
print(high_low_counts_obs)
print(sum(high_low_counts_obs))
}
data = single_column_aligned(DigitData, "ALEXP", 'left')
#i is the ith digit place always since it is from the left
for (i in 1:length(data)){
#get frequency of each digit in each digit place
counts_obs = table(data[i])
counts_obs = counts_obs[-omit_05]
print(counts_obs)
#get freqency of high and low digit places
high_low_counts_obs = data.frame(high=sum(counts_obs[high]), low=sum(counts_obs)-sum(counts_obs[high]))
print(high_low_counts_obs)
}
#if omit_05 in high, then should throw error...no way should it be omiited and counted as highh digit
high_low_freq_theoratical = data.fram(matrix(nrow = 1, ncol = length(contingency_table)))
colnames(high_low_freq_theoratical) = colnames(contingency_table)
rownames(high_low_freq_theoratical) = 'frequency of high digits'
high_low_freq_theoratical
#if omit_05 in high, then should throw error...no way should it be omiited and counted as highh digit
high_low_freq_theoratical = data.frame(matrix(nrow = 1, ncol = length(contingency_table)))
colnames(high_low_freq_theoratical) = colnames(contingency_table)
rownames(high_low_freq_theoratical) = 'frequency of high digits'
high_low_freq_theoratical
#if omit_05 in high, then should throw error...no way should it be omiited and counted as highh digit
#drop X and Digits column of contingency table
contingency_table = contingency_table[-c('X', 'Digits')]
high_low_freq_theoratical = data.frame(matrix(nrow = 1, ncol = length(contingency_table)))
colnames(high_low_freq_theoratical) = colnames(contingency_table)
rownames(high_low_freq_theoratical) = 'frequency of high digits'
#if omit_05 in high, then should throw error...no way should it be omiited and counted as highh digit
#drop X and Digits column of contingency table
contingency_table = contingency_table[!(colnames(single_column_digits) %in% c('X', 'Digits'))]
#if omit_05 in high, then should throw error...no way should it be omiited and counted as highh digit
#drop X and Digits column of contingency table
contingency_table = contingency_table[!(colnames(contingency_table) %in% c('X', 'Digits'))]
high_low_freq_theoratical = data.frame(matrix(nrow = 1, ncol = length(contingency_table)))
colnames(high_low_freq_theoratical) = colnames(contingency_table)
rownames(high_low_freq_theoratical) = 'frequency of high digits'
high_low_freq_theoratical
data = single_column_aligned(DigitData, "ALEXP", 'left')
#i is the ith digit place always since it is from the left
for (i in 1:length(data)){
#get frequency of each digit in each digit place
counts_obs = table(data[i])
counts_obs = counts_obs[-omit_05]
print(counts_obs)
#get freqency of high and low digit places
high_low_counts_obs = data.frame(high=sum(counts_obs[high]), low=sum(counts_obs)-sum(counts_obs[high]))
print(high_low_counts_obs)
#perform binomial test
}
contingency_table
contingency_table[1]
counts_obs
names(counts_obs)
as.integer(names(counts_obs))
contingency_table[1][as.integer(names(counts_obs)),]
contingency_table[[1]][as.integer(names(counts_obs))]
counts_obs
contingency_table[[1]][as.integer(names(counts_obs))+1]*
as.integer(names(counts_obs))+1
as.integer(names(counts_obs))+1
contingency_table[[1]][as.integer(names(counts_obs))+1]
contingency_table[[1]][as.integer(names(counts_obs))+1]*counts_obs
sum(contingency_table[[1]][as.integer(names(counts_obs))+1]*counts_obs)
sum(contingency_table[[1]][as.integer(names(counts_obs))+1]*counts_obs)/sum(counts_obs)
sum(counts_obs)
sum(contingency_table[[1]][-(as.integer(names(counts_obs))+1)])
sum(contingency_table[[1]][as.integer(names(counts_obs))+1])
as.integer(names(counts_obs))
intersect(as.integer(names(counts_obs)), high)
intersect(names(counts_obs), high)
as.integer(intersect(names(counts_obs), high))
diff(names(counts_obs), high)
setdiff(names(counts_obs), high)
setdiff(names(counts_obs), high)
setdiff(names(counts_obs), high)
setdiff(names(counts_obs), high) #the low digits present in this digit place
#+1 since digit start at 0 but index start at 1
high_digits_available = as.integer(intersect(names(counts_obs), high)) + 1 #the high digits present in this digit place
low_digits_available = as.integer(setdiff(names(counts_obs), high)) + 1#the low digits present in this digit place
high_digits_available
low_digits_available
#+1 since digit start at 0 but index start at 1
high_digits_indexes = as.integer(intersect(names(counts_obs), high)) + 1 #the high digits present in this digit place
low_digits_indexes = as.integer(setdiff(names(counts_obs), high)) + 1#the low digits present in this digit place
high_digits_indexes
low_digits_indexes
counts_obs
sum(counts_obs)
#+1 since digit start at 0 but index start at 1
high_digit_counts = counts_obs[intersect(names(counts_obs), high)]
#+1 since digit start at 0 but index start at 1
high_digit_counts = counts_obs[intersect(names(counts_obs), high)]
high_digits_indexes = as.integer(intersect(names(counts_obs), high)) + 1 #the high digits present in this digit place
low_digit_counts = counts_obs[setdiff(names(counts_obs), high)]
high_digit_counts
low_digit_counts
high_digits_indexes
low_digits_indexes
contingency_table[1]
contingency_table[1][high_digits_indexes]
contingency_table[1][high_digits_indexes,]
contingency_table[[1]][high_digits_indexes]
contingency_table[[1]][high_digits_indexes]*high_digit_counts
sum(contingency_table[[1]][high_digits_indexes]*high_digit_counts)/sum(counts_obs)
sum(contingency_table[[1]][high_digits_indexes]*high_digit_counts)#/sum(counts_obs)
sum(contingency_table[[1]][high_digits_indexes]*high_digit_counts)/sum(counts_obs)
sum(contingency_table[[1]][low_digits_indexes]*low_digit_counts)/sum(counts_obs)
sum(contingency_table[[1]][high_digits_indexes]*high_digit_counts)/sum(counts_obs)+
sum(contingency_table[[1]][low_digits_indexes]*low_digit_counts)/sum(counts_obs)
contingency_table
high
contingency_table[as.integer(high)+1,]
colSums(a)
#get the frequency for high digits in each digit place
colSums(contingency_table[as.integer(high)+1,])#+1 since digit start at 0 but index start at 1
#if omit_05 in high, then should throw error...no way should it be omiited and counted as highh digit
#drop X and Digits column of contingency table
high_freq_theoratical = contingency_table[!(colnames(contingency_table) %in% c('X', 'Digits'))]
rownames(high_freq_theoratical) = 'high digits freq'
#if omit_05 in high, then should throw error...no way should it be omiited and counted as highh digit
#drop X and Digits column of contingency table
high_freq_theoratical = contingency_table[!(colnames(contingency_table) %in% c('X', 'Digits'))]
#get the frequency for high digits in each digit place
high_freq_theoratical = colSums(high_freq_theoratical[as.integer(high)+1,]) #+1 since digit start at 0 but index start at 1
rownames(high_freq_theoratical) = 'high digits freq'
#get the frequency for high digits in each digit place
high_freq_theoratical = data.frame(colSums(high_freq_theoratical[as.integer(high)+1,])) #+1 since digit start at 0 but index start at 1
#if omit_05 in high, then should throw error...no way should it be omiited and counted as highh digit
#drop X and Digits column of contingency table
high_freq_theoratical = contingency_table[!(colnames(contingency_table) %in% c('X', 'Digits'))]
#get the frequency for high digits in each digit place
high_freq_theoratical = data.frame(colSums(high_freq_theoratical[as.integer(high)+1,])) #+1 since digit start at 0 but index start at 1
rownames(high_freq_theoratical) = 'high digits freq'
high_freq_theoratical
#get the frequency for high digits in each digit place
high_freq_theoratical = t(data.frame(colSums(high_freq_theoratical[as.integer(high)+1,]))) #+1 since digit start at 0 but index start at 1
#if omit_05 in high, then should throw error...no way should it be omiited and counted as highh digit
#drop X and Digits column of contingency table
high_freq_theoratical = contingency_table[!(colnames(contingency_table) %in% c('X', 'Digits'))]
#get the frequency for high digits in each digit place
high_freq_theoratical = t(data.frame(colSums(high_freq_theoratical[as.integer(high)+1,]))) #+1 since digit start at 0 but index start at 1
rownames(high_freq_theoratical) = 'high digits freq'
high_freq_theoratical
high_freq_theoratical[1]
#get p_value from binomial test
p_value = binom.test(high_low_counts_obs, high_freq_theoratical[i])$p.value
#get p_value from binomial test
p_value = binom.test(as.array(high_low_counts_obs), high_freq_theoratical[i])$p.value
#get table for the theoratical high to low freqency in each digit place
#if omit_05 in high, then should throw error...no way should it be omiited and counted as highh digit
#drop X and Digits column of contingency table
high_freq_theoratical = contingency_table[!(colnames(contingency_table) %in% c('X', 'Digits'))]
#get the frequency for high digits in each digit place
high_freq_theoratical = t(data.frame(colSums(high_freq_theoratical[as.integer(high)+1,]))) #+1 since digit start at 0 but index start at 1
rownames(high_freq_theoratical) = 'high digits freq'
high_freq_theoratical[1]
data = single_column_aligned(DigitData, "ALEXP", 'left')
#i is the ith digit place always since it is from the left
for (i in 1:length(data)){
#get frequency of each digit in each digit place
counts_obs = table(data[i])
counts_obs = counts_obs[-omit_05]
print(counts_obs)
#get freqency of high and low digit places
high_low_counts_obs = data.frame(high=sum(counts_obs[high]), low=sum(counts_obs)-sum(counts_obs[high]))
print(high_low_counts_obs)
#get p_value from binomial test
p_value = binom.test(as.array(high_low_counts_obs), high_freq_theoratical[i])$p.value
}
high_low_counts_obs
as.array(high_low_counts_obs)
high_low_counts_obs[1,]
high_low_counts_obs[1]
data = single_column_aligned(DigitData, "ALEXP", 'left')
#i is the ith digit place always since it is from the left
for (i in 1:length(data)){
#get frequency of each digit in each digit place
counts_obs = table(data[i])
counts_obs = counts_obs[-omit_05]
print(counts_obs)
#get freqency of high and low digit places
high_low_counts_obs = data.frame(high=sum(counts_obs[high]), low=sum(counts_obs)-sum(counts_obs[high]))
print(high_low_counts_obs)
#get p_value from binomial test
p_value = binom.test(as.array(high_low_counts_obs[1,]), high_freq_theoratical[i])$p.value
}
data = single_column_aligned(DigitData, "ALEXP", 'left')
#i is the ith digit place always since it is from the left
for (i in 1:length(data)){
#get frequency of each digit in each digit place
counts_obs = table(data[i])
counts_obs = counts_obs[-omit_05]
print(counts_obs)
#get freqency of high and low digit places
high_low_counts_obs = data.frame(high=sum(counts_obs[high]), low=sum(counts_obs)-sum(counts_obs[high]))
print(high_low_counts_obs)
#get p_value from binomial test
p_value = binom.test(high_low_counts_obs[1,], high_freq_theoratical[i])$p.value
}
high_freq_theoratical[1]
data = single_column_aligned(DigitData, "ALEXP", 'left')
#i is the ith digit place always since it is from the left
for (i in 1:length(data)){
#get frequency of each digit in each digit place
counts_obs = table(data[i])
counts_obs = counts_obs[-omit_05]
print(counts_obs)
#get freqency of high and low digit places
high_counts_obs = sum(counts_obs[high])
total_counts_obs = sum(counts_obs)
print(high_low_counts_obs)
print(total_counts_obs)
#get p_value from binomial test
p_value = binom.test(high_counts_obs, total_counts_obs, high_freq_theoratical[i])$p.value
}
data = single_column_aligned(DigitData, "ALEXP", 'left')
#i is the ith digit place always since it is from the left
for (i in 1:length(data)){
#get frequency of each digit in each digit place
counts_obs = table(data[i])
counts_obs = counts_obs[-omit_05]
print(counts_obs)
#get freqency of high and low digit places
high_counts_obs = sum(counts_obs[high])
total_counts_obs = sum(counts_obs)
print(high_counts_obs)
print(total_counts_obs)
#get p_value from binomial test
p_value = binom.test(high_counts_obs, total_counts_obs, high_freq_theoratical[i])$p.value
print(p_value)
}
high_freq_theoratical[1]
#get table for the theoratical high to low freqency in each digit place
#if omit_05 in high, then should throw error...no way should it be omiited and counted as highh digit
#drop X and Digits column of contingency table
high_freq_theoratical = contingency_table[!(colnames(contingency_table) %in% c('X', 'Digits'))]
#get the frequency for high digits in each digit place
high_freq_theoratical = t(data.frame(colSums(high_freq_theoratical[as.integer(high)+1,]))) #+1 since digit start at 0 but index start at 1
rownames(high_freq_theoratical) = 'high digits freq'
high_freq_theoratical[1]
data = single_column_aligned(DigitData, "ALEXP", 'left')
#i is the ith digit place always since it is from the left
for (i in 1:length(data)){
#get frequency of each digit in each digit place
counts_obs = table(data[i])
counts_obs = counts_obs[-omit_05]
#get freqency of high and low digit places
high_counts_obs = sum(counts_obs[high])
total_counts_obs = sum(counts_obs)
#get p_value from binomial test
p_value = binom.test(high_counts_obs, total_counts_obs, high_freq_theoratical[i])$p.value
print(p_value)
}
DigitData@max
DigitData@max
