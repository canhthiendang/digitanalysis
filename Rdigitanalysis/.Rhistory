output = list()
#get indexes for each category
indexes_of_categories = break_by_category(data=digitdata@cleaned, break_out=break_out) #this is a list since unequal number of entries for each category
#break by category for all
for (category_name in names(indexes_of_categories)){
indexes_of_category = indexes_of_categories[[category_name]]
data_of_category = data.frame(data[indexes_of_category, ])
#when do data.frame.... col names changes from A BC to A.BC
colnames(data_of_category) = gsub("."," ",colnames(data_of_category), fixed=TRUE)
#get p_values for this category ('year')
p_values = high_low_by_digit_place(digitdata, data_of_category, high, high_freq_theoratical, skip_first_figit, omit_05)
#update returning list
output[[category_name]] = p_values
}
return(output)
}
}
#test high low test
data_columns = c("ALEXP", "BENTOT")
high = c(6,7,8,9)
omit_05 = c(0,5)
skip_first_figit = TRUE
last_digit_test_included = FALSE
break_out = 'YEAR'
high_low_test(DigitData, contingency_table, data_columns, high, omit_05, skip_first_figit, last_digit_test_included, break_out)
####
#need ADD plot parameter
####
high_low_test = function(digitdata, contingency_table, data_columns, high=c(6,7,8,9), omit_05=c(0,5), skip_first_figit=TRUE, last_digit_test_included=FALSE, break_out=NA){
#checkings
if (length(omit_05) == 1){
###check omit only 5, which is not allowed
if (!(is.na(omit_05)) && (omit_05 == 5)){
stop('cannot omit only 5 without also omitting 0 first')
}
}
#get table for the theoratical high to low freqency in each digit place
#if omit_05 in high, then should throw error...no way should it be omiited and counted as highh digit
#drop X and Digits column of contingency table
high_freq_theoratical = contingency_table[!(colnames(contingency_table) %in% c('X', 'Digits'))]
rownames(high_freq_theoratical) = 0:9
#drop 0 and/or 5
if (!(is.na(omit_05[1]))){
high_freq_theoratical = high_freq_theoratical[-(omit_05+1), ]  ### +1 since omit_05 is digits begins with 0, while indexes begins with 1
}
###normalize the columns after (if) dropping 0 and/or 5
for (name in colnames(high_freq_theoratical)){
#renormialize
high_freq_theoratical[name] = high_freq_theoratical[name] / sum(high_freq_theoratical[name])
}
#get the frequency for high digits in each digit place
high_freq_theoratical = t(data.frame(colSums(high_freq_theoratical[as.character(high), ])))
rownames(high_freq_theoratical) = 'high digits freq'
#get the data columns desired
lst = grab_desired_aligned_columns(digitdata, data_columns, skip_first_figit=skip_first_figit, last_digit_test_included=last_digit_test_included, align_direction='left')
data = lst$digits_table
digitdata = lst$digitdata
#perform a standard high low test
if (is.na(break_out)){
p_values = high_low_by_digit_place(digitdata, data, high, high_freq_theoratical, skip_first_figit, omit_05)
return(p_values)
}
#perform a 'year effect' high low test break by category
else {
#initlaize a list to be returned
output = list()
#get indexes for each category
indexes_of_categories = break_by_category(data=digitdata@cleaned, break_out=break_out) #this is a list since unequal number of entries for each category
#break by category for all
for (category_name in names(indexes_of_categories)){
indexes_of_category = indexes_of_categories[[category_name]]
data_of_category = data.frame(data[indexes_of_category, ])
#when do data.frame.... col names changes from A BC to A.BC
colnames(data_of_category) = gsub("."," ",colnames(data_of_category), fixed=TRUE)
#get p_values for this category ('year')
p_values = high_low_by_digit_place(digitdata, data_of_category, high, high_freq_theoratical, skip_first_figit, omit_05)
#update returning list
output[[category_name]] = p_values
}
return(output)
}
}
#test high low test
data_columns = c("ALEXP", "BENTOT")
high = c(6,7,8,9)
omit_05 = c(0,5)
skip_first_figit = TRUE
last_digit_test_included = FALSE
break_out = 'YEAR'
high_low_test(DigitData, contingency_table, data_columns, high, omit_05, skip_first_figit, last_digit_test_included, break_out)
install.packages("tidyverse")
############################################################
#Functions for digit analysis R package
###plotting helper functions
#Wenjun Chang
#Summer 2020
############################################################
############################################################
#helper function
############################################################
#############prelim############
#clear workspace
rm(list = ls())
#free up R memory
gc()
#force numerical representation rather than scientific
#options(scipen = 999)
options(scipen = 1)
options(digits = 2)
##############################
#load data input functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\data input functions.R')
#load functions for computing Benford table
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\Benford table functions.R')
# #load helper functions for all digit test
# source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all digit test helper functions.R')
#
# #load chi square test GOF functions
# source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\chi square goodness of fit functions.R')
#
# #load main function for all digit test
# source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all digit test main function.R')
#
# #load all functions for digit pair test
# source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\digit pair test.R')
#
# #load all functions for rounding test
# source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\rounding test.R')
#
# #load all functions for repeat test
# source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\repeat test.R')
#
# #load all functions for high low test
# source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\high low test.R')
#
# #load all functions for padding test
# source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\padding test.R')
#############################################################
#############try it with given data##########################
#############################################################
#test data input and benford table functions
#load data input functions
data_columns = c("ALEXP","BENTOT", "BENM", "BENF")
fp = 'C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\ARID MASTER FINAL.csv'
DigitData = make_class(filepath = fp, col_analyzing = data_columns)
contingency_table = load_Benford_table('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\contingency_table.csv')
contingency_table
#gg plot
#test padding test
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
max_length = 7
num_digits = 5
N = 10 #120k datasets took 15 mins
omit_05 = c(0,5)
break_out = 'DIST'
############################################################
#Functions for digit analysis R package
###plotting helper functions
#Wenjun Chang
#Summer 2020
############################################################
############################################################
#helper function
############################################################
#############prelim############
#clear workspace
rm(list = ls())
#free up R memory
gc()
#force numerical representation rather than scientific
#options(scipen = 999)
options(scipen = 1)
options(digits = 2)
##############################
#load data input functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\data_input_functions.R')
#load functions for computing Benford table
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\Benford_table_functions.R')
#load helper functions for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all_digit_test_helper_functions.R')
#load chi square test GOF functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\chi_square_goodness_of_fit_functions.R')
#load main function for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all_digit_test_main_function.R')
#load all functions for digit pair test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\digit_pair_test.R')
#load all functions for rounding test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\rounding_test.R')
#load all functions for repeat test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\repeat_test.R')
#load all functions for high low test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\high_low_test.R')
#load all functions for padding test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\padding_test.R')
#############################################################
#############try it with given data##########################
#############################################################
#test data input and benford table functions
#load data input functions
data_columns = c("ALEXP","BENTOT", "BENM", "BENF")
fp = 'C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\ARID MASTER FINAL.csv'
DigitData = make_class(filepath = fp, col_analyzing = data_columns)
contingency_table = load_Benford_table('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\contingency_table.csv')
contingency_table
#gg plot
#test padding test
data_columns = c("ALEXP")#,"BENTOT", "BENM", "BENF")
max_length = 7
num_digits = 5
N = 10 #120k datasets took 15 mins
omit_05 = c(0,5)
break_out = 'DIST'
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out)
a
a$diff_in_mean
a$p_values
a$expected_mean
a$observed_mean
plot = ggplot(a$diff_in_mean)
library(ggplot2)
plot = ggplot(a$diff_in_mean)
plot
plot + geom_bar()
k=a$diff_in_mean
plot = ggplot(k, aes(rownames(k)))
plot + geom_bar()
plot = ggplot(k, aes(district=rownames(k)))
plot + geom_bar()
district = rownames(k)
plot = ggplot(k, aes(district))
plot + geom_bar()
break_out = NA'DIST'
break_out = NA#'DIST'
a=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out)
a
k=a$diff_in_mean
k
k=a$diff_in_mean
digit_places = colnames(k)
plot = ggplot(k, aes(digit_places))
plot + geom_bar()
plot = ggplot(k[1], aes(digit_places))
plot + geom_bar()
k=a$diff_in_mean[1]
k
k=a$diff_in_mean[1,]
k
k=a$diff_in_mean
digit_places = colnames(k)
plot = ggplot(data = k, aes(all=digit_places))
plot + geom_bar()
plot = ggplot(data = k, aes(x=digit_places, y=k))
plot + geom_bar()
k
rownames(k) = 'value'
k['digit_places',] = colnames(k)
k
plot = ggplot(data = k, aes(x=digit_places, y=value))
plot + geom_bar()
t(k)
plot = ggplot(data = t(k), aes(x=digit_places, y=value))
plot + geom_bar()
plot + geom_bar(stat="identity")
mydata = data.frame(a$diff_in_mean, colnames(a$diff_in_mean))
k
c(a$diff_in_mean)
c(t(a$diff_in_mean))
values = c(t(a$diff_in_mean))
digit_places = colnames(a$diff_in_mean)
mydata = data.frame(values, digit_places)
plot = ggplot(data = t(k), aes(x=digit_places, y=values))
plot = ggplot(data = mydata, aes(x=digit_places, y=values))
plot + geom_bar(stat="identity")
ggplot(data = a$diff_in_mean, aes(x=colnames(a$diff_in_mean), y='1')) + geom_bar(stat="identity")
ggplot(data = a$diff_in_mean, aes(x=colnames(a$diff_in_mean), y='1')) + geom_bar()
ggplot(data = a$diff_in_mean, aes(x=colnames(), y='1')) + geom_bar()
ggplot(data = a$diff_in_mean, aes(x=column, y='1')) + geom_bar()
ggplot(data = a$diff_in_mean, aes(x=column, y='all')) + geom_bar()
k=a$diff_in_mean
t(k)
ggplot(data = t(k), aes(x=column, y='all')) + geom_bar()
ass = cbind(t(k), colnames(k))
ass
ass = cbind(t(k), name=colnames(k))
ass
ggplot(data = t(k), aes(x='name', y='all')) + geom_bar()
ggplot(data = ass, aes(x='name', y='all')) + geom_bar()
plot + geom_bar(stat="identity")
+ geom_bar(stat="identity")
plot = ggplot(data = mydata, aes(x=digit_places, y=values)) +
geom_bar(stat="identity")
plot
plot = ggplot(data = mydata, aes(x=digit_places, y=values)) +
geom_bar(stat="identity") + geom_text(aes(label=values), vjust=-0.3, size=3.5, color='blue')
plot
plot = ggplot(data = mydata, aes(x=digit_places, y=values)) +
geom_bar(stat="identity") #+ geom_text(aes(label=values), vjust=-0.3, size=3.5, color='blue')
plot
b=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out="DIST")
b$diff_in_mean
plot p + theme(legend.position="bottom")
plot + theme(legend.position="bottom")
p=b$diff_in_mean
t(p)
p=t(b$diff_in_mean)
p['x'] = rownames(p)
p=t(b$diff_in_mean)
p['x'] = rownames(p)
rownames(p)
P
p
p=t(b$diff_in_mean)
p
rownames(p)
p['x'] = rownames(p)
p
p=t(b$diff_in_mean)
p['x'] = rownames(p)
p['x'] = NA
p
p=t(b$diff_in_mean)
p['x'] = NA
p
p=t(b$diff_in_mean)
p
rownames(p)
p['all']
colnames(p)
p[['all']]
p['all']
p
p$'all'
p=data.frame(t(b$diff_in_mean))
p$'all'
p
p['x'] = rownames(p)
p
p=data.frame(t(b$diff_in_mean))
p
data = data.frame(matrix(nrow = nrow(p), ncol = 3))
data = data.frame(matrix(nrow = 0, ncol = 3))
data
colnames(data) = c('digit_places', 'values', 'category')
data
data = data.frame(matrix(nrow = 0, ncol = 3))
colnames(data) = c('digit_places', 'values', 'category')
data
for (name in colnames(p)){
curr_data = data.frame(digit_places=rownames(p), values=p[name], category=name)
data = rbind(data, curr_data)
}
name
name*3
rep(name,3)
curr_data = data.frame(digit_places=rownames(p), values=p[name], category=rep(name, nrow(p)))
data
for (name in colnames(p)){
curr_data = data.frame(digit_places=rownames(p), values=p[name], category=rep(name, nrow(p)))
data = rbind(data, curr_data)
}
data
for (name in colnames(p)){
curr_data = data.frame(digit_places=rownames(p), values=p[[name]], category=rep(name, nrow(p)))
data = rbind(data, curr_data)
}
p
data = data.frame(matrix(nrow = 0, ncol = 3))
colnames(data) = c('digit_places', 'values', 'category')
data
for (name in colnames(p)){
curr_data = data.frame(digit_places=rownames(p), values=p[[name]], category=rep(name, nrow(p)))
data = rbind(data, curr_data)
}
data
# Stacked barplot with multiple groups
# Use position=position_dodge()
ggplot(data=data, aes(x=digit_places, y=values, fill=category)) +
geom_bar(stat="identity", position=position_dodge())
#2d with variables
b=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out="DIST")
p=data.frame(t(b$diff_in_mean))
p
p=data.frame(t(b$diff_in_mean[1:3]))
p
p=data.frame(t(b$diff_in_mean[1:3]))
#2d with variables
b=padding_test(DigitData, contingency_table, data_columns, max_length, num_digits, N, omit_05, break_out="DIST")
p=data.frame(t(b$diff_in_mean[1:3, ]))
p
data = data.frame(matrix(nrow = 0, ncol = 3))
colnames(data) = c('digit_places', 'values', 'category')
data
for (name in colnames(p)){
curr_data = data.frame(digit_places=rownames(p), values=p[[name]], category=rep(name, nrow(p)))
data = rbind(data, curr_data)
}
data
# Stacked barplot with multiple groups
# Use position=position_dodge()
ggplot(data=data, aes(x=digit_places, y=values, fill=category)) +
geom_bar(stat="identity", position=position_dodge())
data
#3d plot
ggplot(data, aes(x=digit_places, y=values, group=category, colour=category))
install.packages('plot_gg')
d <- read.table(text=' x   y     z
t1   5   high
t1   2   low
t1   4   med
t2   8   high
t2   1   low
t2   3   med
t3  50   high
t3  12   med
t3  35   low', header=TRUE)
d
library(latticeExtra)
install.packages(latticeExtra)
install.packages('latticeExtra')
data
library(latticeExtra)
cloud(values~digit_places+category, data, panel.3d.cloud=panel.3dbars, col.facet='grey',
xbase=0.4, ybase=0.4, scales=list(arrows=FALSE, col=1),
par.settings = list(axis.line = list(col = "transparent")))
latticeExtra::cloud(values~digit_places+category, data, panel.3d.cloud=panel.3dbars, col.facet='grey',
xbase=0.4, ybase=0.4, scales=list(arrows=FALSE, col=1),
par.settings = list(axis.line = list(col = "transparent")))
library(latticeExtra)
latticeExtra::cloud(values~digit_places+category, data, panel.3d.cloud=panel.3dbars, col.facet='grey',
xbase=0.4, ybase=0.4, scales=list(arrows=FALSE, col=1),
par.settings = list(axis.line = list(col = "transparent")))
cloud(values~digit_places+category, data, panel.3d.cloud=panel.3dbars, col.facet='grey',
xbase=0.4, ybase=0.4, scales=list(arrows=FALSE, col=1),
par.settings = list(axis.line = list(col = "transparent")))
library(latticeExtra)
cloud(values~digit_places+category, data, panel.3d.cloud=panel.3dbars, col.facet='grey',
xbase=0.4, ybase=0.4, scales=list(arrows=FALSE, col=1),
par.settings = list(axis.line = list(col = "transparent")))
library(latticeExtra)
cloud(values~digit_places+category, data, panel.3d.cloud=panel.3dbars, col.facet='grey',
xbase=0.4, ybase=0.4, scales=list(arrows=FALSE, col=1),
par.settings = list(axis.line = list(col = "transparent")))
d <- read.table(text=' x   y     z
t1   5   high
t1   2   low
t1   4   med
t2   8   high
t2   1   low
t2   3   med
t3  50   high
t3  12   med
t3  35   low', header=TRUE)
cloud(y~x+z, d, panel.3d.cloud=panel.3dbars, col.facet='grey',
xbase=0.4, ybase=0.4, scales=list(arrows=FALSE, col=1),
par.settings = list(axis.line = list(col = "transparent")))
d <- read.table(text=' x   y     z
t1   5   high
t1   2   low
t1   4   med
t2   8   high
t2   1   low
t2   3   med
t3  50   high
t3  12   med
t3  35   low', header=TRUE)
cloud(y~x+z, d, panel.3d.cloud=panel.3dbars, col.facet='grey',
xbase=0.4, ybase=0.4, scales=list(arrows=FALSE, col=1),
par.settings = list(axis.line = list(col = "transparent")))
library(latticeExtra)
cloud(values~digit_places+category, data, panel.3d.cloud=panel.3dbars, col.facet='grey',
xbase=0.4, ybase=0.4, scales=list(arrows=FALSE, col=1),
par.settings = list(axis.line = list(col = "transparent")))
#3d plot
ggplot(data, aes(x=digit_places, y=values, group=category, colour=category))
+ geom_line() + geom_point()
library(latticeExtra)
cloud(values~digit_places+category, data, panel.3d.cloud=panel.3dbars, col.facet='grey',
xbase=0.4, ybase=0.4, scales=list(arrows=FALSE, col=1),
par.settings = list(axis.line = list(col = "transparent")))
#############prelim############
#clear workspace
rm(list = ls())
d <- read.table(text=' x   y     z
t1   5   high
t1   2   low
t1   4   med
t2   8   high
t2   1   low
t2   3   med
t3  50   high
t3  12   med
t3  35   low', header=TRUE)
cloud(y~x+z, d, panel.3d.cloud=panel.3dbars, col.facet='grey',
xbase=0.4, ybase=0.4, scales=list(arrows=FALSE, col=1),
par.settings = list(axis.line = list(col = "transparent")))
library(latticeExtra)
cloud(values~digit_places+category, data, panel.3d.cloud=panel.3dbars, col.facet='grey',
xbase=0.4, ybase=0.4, scales=list(arrows=FALSE, col=1),
par.settings = list(axis.line = list(col = "transparent")))
d <- read.table(text=' x   y     z
t1   5   high
t1   2   low
t1   4   med
t2   8   high
t2   1   low
t2   3   med
t3  50   high
t3  12   med
t3  35   low', header=TRUE)
cloud(y~x+z, d, panel.3d.cloud=panel.3dbars, col.facet='grey',
xbase=0.4, ybase=0.4, scales=list(arrows=FALSE, col=1),
par.settings = list(axis.line = list(col = "transparent")))
