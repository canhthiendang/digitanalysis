gc()
##############################
#general functions
#load data input functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\data_input_functions.R')
#load functions for computing Benford table
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\Benford_table_functions.R')
#load all plotting functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\plotting_functions.R')
#load input check function
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\input_check_function.R')
############################
#testing
#load helper functions for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all_digit_test_helper_functions.R')
#load all functions for padding test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\padding_test.R')
#test with data
#load data input functions
data_columns = c("ALEXP.Values")
fp = 'C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\ARID MASTER FINAL.csv'
DigitData = make_class(filepath = fp, col_analyzing = data_columns)
contingency_table = load_Benford_table('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\contingency_table.csv')
#DigitData has to drop all columns with NA in ALEXP.Values
indexes_with_valid_alexp_values = which(!(is.na(DigitData@cleaned$ALEXP.Values)))
DigitData = make_sub_digitdata(DigitData, indexes_with_valid_alexp_values)
#test padding test
data_columns = c("ALEXP.Values")#c("ALEXP")#,"BENTOT", "BENM", "BENF")
max_length = 7
num_digits = 5
N = 1 #120k datasets took 15 mins
omit_05 = c(0,5)
break_out = NA#'DIST'
category= NA#'SECTOR'
category_grouping = NA#list(Training_and_Transport=c("TRN", "TRAVEL", "VEHICLES"), Civil_Works=c("CW"), Goods_and_Equipment=c("GE"))
distribution='Benford'
#match the data with Jetson's
result = padding_test(digitdata=DigitData, contingency_table=NA, data_columns=data_columns, max_length=max_length,
num_digits=num_digits, N=N, omit_05=omit_05, distribution=distribution, break_out=break_out,
category=category, category_grouping=category_grouping, plot=TRUE)
result
# single_padding_test(digitdata=DigitData, contingency_table=contingency_table, data_columns=data_columns, max_length=max_length,
#                     num_digits=num_digits, N=N, omit_05=omit_05, category=category, category_grouping=category_grouping)
############################################################
#Testing for padding test
#Wenjun Chang
#Summer 2020
############################################################
#############prelim############
#clear workspace
rm(list = ls())
#free up R memory
gc()
##############################
#general functions
#load data input functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\data_input_functions.R')
#load functions for computing Benford table
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\Benford_table_functions.R')
#load all plotting functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\plotting_functions.R')
#load input check function
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\input_check_function.R')
############################
#testing
#load helper functions for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all_digit_test_helper_functions.R')
#load all functions for padding test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\padding_test.R')
#test with data
#load data input functions
data_columns = c("ALEXP.Values")
fp = 'C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\ARID MASTER FINAL.csv'
DigitData = make_class(filepath = fp, col_analyzing = data_columns)
contingency_table = load_Benford_table('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\contingency_table.csv')
#DigitData has to drop all columns with NA in ALEXP.Values
indexes_with_valid_alexp_values = which(!(is.na(DigitData@cleaned$ALEXP.Values)))
DigitData = make_sub_digitdata(DigitData, indexes_with_valid_alexp_values)
#test padding test
data_columns = c("ALEXP.Values")#c("ALEXP")#,"BENTOT", "BENM", "BENF")
max_length = 7
num_digits = 5
N = 1 #120k datasets took 15 mins
omit_05 = c(0,5)
break_out = NA#'DIST'
category= NA#'SECTOR'
category_grouping = NA#list(Training_and_Transport=c("TRN", "TRAVEL", "VEHICLES"), Civil_Works=c("CW"), Goods_and_Equipment=c("GE"))
distribution='uniform'
#match the data with Jetson's
result = padding_test(digitdata=DigitData, contingency_table=NA, data_columns=data_columns, max_length=max_length,
num_digits=num_digits, N=N, omit_05=omit_05, distribution=distribution, break_out=break_out,
category=category, category_grouping=category_grouping, plot=TRUE)
result
# single_padding_test(digitdata=DigitData, contingency_table=contingency_table, data_columns=data_columns, max_length=max_length,
#                     num_digits=num_digits, N=N, omit_05=omit_05, category=category, category_grouping=category_grouping)
############################################################
#Testing for padding test
#Wenjun Chang
#Summer 2020
############################################################
#############prelim############
#clear workspace
rm(list = ls())
#free up R memory
gc()
##############################
#general functions
#load data input functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\data_input_functions.R')
#load functions for computing Benford table
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\Benford_table_functions.R')
#load all plotting functions
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\plotting_functions.R')
#load input check function
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\input_check_function.R')
############################
#testing
#load helper functions for all digit test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\all_digit_test_helper_functions.R')
#load all functions for padding test
source('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\Rdigitanalysis\\R\\padding_test.R')
#test with data
#load data input functions
data_columns = c("ALEXP.Values")
fp = 'C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\ARID MASTER FINAL.csv'
DigitData = make_class(filepath = fp, col_analyzing = data_columns)
contingency_table = load_Benford_table('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\digitanalysis\\contingency_table.csv')
#DigitData has to drop all columns with NA in ALEXP.Values
indexes_with_valid_alexp_values = which(!(is.na(DigitData@cleaned$ALEXP.Values)))
DigitData = make_sub_digitdata(DigitData, indexes_with_valid_alexp_values)
#test padding test
data_columns = c("ALEXP.Values")#c("ALEXP")#,"BENTOT", "BENM", "BENF")
max_length = 7
num_digits = 5
N = 1 #120k datasets took 15 mins
omit_05 = c(0,5)
break_out = NA#'DIST'
category= NA#'SECTOR'
category_grouping = NA#list(Training_and_Transport=c("TRN", "TRAVEL", "VEHICLES"), Civil_Works=c("CW"), Goods_and_Equipment=c("GE"))
distribution='benford'
#match the data with Jetson's
result = padding_test(digitdata=DigitData, contingency_table=NA, data_columns=data_columns, max_length=max_length,
num_digits=num_digits, N=N, omit_05=omit_05, distribution=distribution, break_out=break_out,
category=category, category_grouping=category_grouping, plot=TRUE)
result
# single_padding_test(digitdata=DigitData, contingency_table=contingency_table, data_columns=data_columns, max_length=max_length,
#                     num_digits=num_digits, N=N, omit_05=omit_05, category=category, category_grouping=category_grouping)
data = data.frame(AJG_2012 = c(50.9, 30, 100, 100, 92.9, 65))
data
hist_2D_variables = function(data, data_style='row', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram'){
if (data_style == 'row'){
#transpose it to column style, what ggplot wants
data = data.frame(t(data))
}
#intialize a df for plotting, columns = x, y, category
plotting_data = data.frame(matrix(nrow = 0, ncol = 3))
colnames(plotting_data) = c('x', 'y', 'category')
#fill up df
for (name in colnames(data)){
single_category_data = data.frame(x=rownames(data), y=data[[name]], category=rep(name, nrow(data)))
plotting_data = rbind(plotting_data, single_category_data)
}
#stacked 2d barplot with multiple groups
#use position=position_dodge()
library(ggplot2)
hist2d_multiple = ggplot(data=plotting_data, aes(x=x, y=y, fill=category)) +
geom_bar(stat="identity", position=position_dodge()) + scale_x_discrete(limits=rownames(data)) +
scale_fill_grey(start=0.7, end=0.3) + scale_y_continuous(breaks=number_ticks(10)) +
xlab(xlab) + ylab(ylab) + ggtitle(title) #ensure order of digit places
#+ theme(legend.position="bottom") #legend position
return(hist2d_multiple)
}
data = data.frame(AJG_2012 = c(50.9, 30, 100, 100, 92.9, 65))
rownames(data) = c('Acquisition counts', 'Acquired firm names', 'Individual acquisition cost', 'Total acquisition cost',
'Named acquisitions in SDC found in 10K', 'Named acquisitions in the 10-K found in SDC')
data
data = data.frame(AJG_2012 = c(50.9, 30, 100, 100, 92.9, 65),
MD_2012 = c(18.75,  -1, NA, 1, 0, NA))
rownames(data) = c('Acquisition counts', 'Acquired firm names', 'Individual acquisition cost', 'Total acquisition cost',
'Named acquisitions in SDC found in 10K', 'Named acquisitions in the 10-K found in SDC')
data
data = data.frame(AJG_2012 = c(0.509, 0.30, 1, 1, 0.929, 0.65),
MD_2012 = c(0.1875,  -1, NA, 1, 0, NA),
GOOG_2014 = c(-0.842, -0.842, 0.333, 0.269, 0.105, 0.667),
ENSG_2009 = c(0, -1, -1, -1, 0, NA),
IBM_2010 = c(0.176, 0.176, 0, 0.717, 1, 0.823))
rownames(data) = c('Acquisition counts', 'Acquired firm names', 'Individual acquisition cost', 'Total acquisition cost',
'Named acquisitions in SDC found in 10K', 'Named acquisitions in the 10-K found in SDC')
data
hist_2D_variables = function(data, data_style='row', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram'){
if (data_style == 'row'){
#transpose it to column style, what ggplot wants
data = data.frame(t(data))
}
#intialize a df for plotting, columns = x, y, category
plotting_data = data.frame(matrix(nrow = 0, ncol = 3))
colnames(plotting_data) = c('x', 'y', 'category')
#fill up df
for (name in colnames(data)){
single_category_data = data.frame(x=rownames(data), y=data[[name]], category=rep(name, nrow(data)))
plotting_data = rbind(plotting_data, single_category_data)
}
#stacked 2d barplot with multiple groups
#use position=position_dodge()
library(ggplot2)
hist2d_multiple = ggplot(data=plotting_data, aes(x=x, y=y, fill=category)) +
geom_bar(stat="identity", position=position_dodge()) + scale_x_discrete(limits=rownames(data)) +
scale_fill_grey(start=0.7, end=0.3) + scale_y_continuous(breaks=number_ticks(10)) +
xlab(xlab) + ylab(ylab) + ggtitle(title) #ensure order of digit places
#+ theme(legend.position="bottom") #legend position
return(hist2d_multiple)
}
data = data.frame(AJG_2012 = c(0.509, 0.30, 1, 1, 0.929, 0.65),
MD_2012 = c(0.1875,  -1, NA, 1, 0, NA),
GOOG_2014 = c(-0.842, -0.842, 0.333, 0.269, 0.105, 0.667),
ENSG_2009 = c(0, -1, -1, -1, 0, NA),
IBM_2010 = c(0.176, 0.176, 0, 0.717, 1, 0.823))
rownames(data) = c('Acquisition counts', 'Acquired firm names', 'Individual acquisition cost', 'Total acquisition cost',
'Named acquisitions in SDC found in 10K', 'Named acquisitions in the 10-K found in SDC')
data
hist_2D_variables(data, data_style='row', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram')
hist_2D_variables(data, data_style='col', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram')
hist_2D_variables = function(data, data_style='row', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram'){
if (data_style == 'row'){
#transpose it to column style, what ggplot wants
data = data.frame(t(data))
}
#intialize a df for plotting, columns = x, y, category
plotting_data = data.frame(matrix(nrow = 0, ncol = 3))
colnames(plotting_data) = c('x', 'y', 'category')
#fill up df
for (name in colnames(data)){
single_category_data = data.frame(x=rownames(data), y=data[[name]], category=rep(name, nrow(data)))
plotting_data = rbind(plotting_data, single_category_data)
}
#stacked 2d barplot with multiple groups
#use position=position_dodge()
library(ggplot2)
hist2d_multiple = ggplot(data=plotting_data, aes(x=x, y=y, fill=category)) +
geom_bar(stat="identity", position=position_dodge()) + scale_x_discrete(limits=rownames(data)) +
scale_y_continuous(breaks=number_ticks(10)) +
xlab(xlab) + ylab(ylab) + ggtitle(title) #ensure order of digit places
#+ theme(legend.position="bottom") #legend position
return(hist2d_multiple)
}
data = data.frame(AJG_2012 = c(0.509, 0.30, 1, 1, 0.929, 0.65),
MD_2012 = c(0.1875,  -1, NA, 1, 0, NA),
GOOG_2014 = c(-0.842, -0.842, 0.333, 0.269, 0.105, 0.667),
ENSG_2009 = c(0, -1, -1, -1, 0, NA),
IBM_2010 = c(0.176, 0.176, 0, 0.717, 1, 0.823))
rownames(data) = c('Acquisition counts', 'Acquired firm names', 'Individual acquisition cost', 'Total acquisition cost',
'Named acquisitions in SDC found in 10K', 'Named acquisitions in the 10-K found in SDC')
data
hist_2D_variables(data, data_style='col', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram')
hist_2D_variables = function(data, data_style='row', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram'){
if (data_style == 'row'){
#transpose it to column style, what ggplot wants
data = data.frame(t(data))
}
#intialize a df for plotting, columns = x, y, category
plotting_data = data.frame(matrix(nrow = 0, ncol = 3))
colnames(plotting_data) = c('x', 'y', 'category')
#fill up df
for (name in colnames(data)){
single_category_data = data.frame(x=rownames(data), y=data[[name]], category=rep(name, nrow(data)))
plotting_data = rbind(plotting_data, single_category_data)
}
#stacked 2d barplot with multiple groups
#use position=position_dodge()
library(ggplot2)
hist2d_multiple = ggplot(data=plotting_data, aes(x=x, y=y, fill=category)) +
geom_bar(stat="identity", position=position_dodge()) + scale_x_discrete(limits=rownames(data)) +
scale_fill_grey(start=0.7, end=0.3) + scale_y_continuous(breaks=number_ticks(10)) +
xlab(xlab) + ylab(ylab) + ggtitle(title) #ensure order of digit places
#+ theme(legend.position="bottom") #legend position
return(hist2d_multiple)
}
data = data.frame(AJG_2012 = c(0.509, 0.30, 1, 1, 0.929, 0.65),
MD_2012 = c(0.1875,  -1, NA, 1, 0, NA),
GOOG_2014 = c(-0.842, -0.842, 0.333, 0.269, 0.105, 0.667),
ENSG_2009 = c(0, -1, -1, -1, 0, NA),
IBM_2010 = c(0.176, 0.176, 0, 0.717, 1, 0.823))
rownames(data) = c('Acquisition counts', 'Acquired firm names', 'Individual acquisition cost', 'Total acquisition cost',
'Named acquisitions in SDC found in 10K', 'Named acquisitions in the 10-K found in SDC')
data
hist_2D_variables(data, data_style='col', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram')
hist_2D_variables = function(data, data_style='row', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram'){
if (data_style == 'row'){
#transpose it to column style, what ggplot wants
data = data.frame(t(data))
}
#intialize a df for plotting, columns = x, y, category
plotting_data = data.frame(matrix(nrow = 0, ncol = 3))
colnames(plotting_data) = c('x', 'y', 'category')
#fill up df
for (name in colnames(data)){
single_category_data = data.frame(x=rownames(data), y=data[[name]], category=rep(name, nrow(data)))
plotting_data = rbind(plotting_data, single_category_data)
}
#stacked 2d barplot with multiple groups
#use position=position_dodge()
library(ggplot2)
hist2d_multiple = ggplot(data=plotting_data, aes(x=x, y=y, fill=category)) +
geom_bar(stat="identity", position=position_dodge()) + scale_x_discrete(limits=rownames(data)) +
scale_fill_grey(start=0.6, end=0.1) + scale_y_continuous(breaks=number_ticks(10)) +
xlab(xlab) + ylab(ylab) + ggtitle(title) #ensure order of digit places
#+ theme(legend.position="bottom") #legend position
return(hist2d_multiple)
}
data = data.frame(AJG_2012 = c(0.509, 0.30, 1, 1, 0.929, 0.65),
MD_2012 = c(0.1875,  -1, NA, 1, 0, NA),
GOOG_2014 = c(-0.842, -0.842, 0.333, 0.269, 0.105, 0.667),
ENSG_2009 = c(0, -1, -1, -1, 0, NA),
IBM_2010 = c(0.176, 0.176, 0, 0.717, 1, 0.823))
rownames(data) = c('Acquisition counts', 'Acquired firm names', 'Individual acquisition cost', 'Total acquisition cost',
'Named acquisitions in SDC found in 10K', 'Named acquisitions in the 10-K found in SDC')
data
hist_2D_variables(data, data_style='col', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram')
hist_2D_variables = function(data, data_style='row', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram'){
if (data_style == 'row'){
#transpose it to column style, what ggplot wants
data = data.frame(t(data))
}
#intialize a df for plotting, columns = x, y, category
plotting_data = data.frame(matrix(nrow = 0, ncol = 3))
colnames(plotting_data) = c('x', 'y', 'category')
#fill up df
for (name in colnames(data)){
single_category_data = data.frame(x=rownames(data), y=data[[name]], category=rep(name, nrow(data)))
plotting_data = rbind(plotting_data, single_category_data)
}
#stacked 2d barplot with multiple groups
#use position=position_dodge()
library(ggplot2)
hist2d_multiple = ggplot(data=plotting_data, aes(x=x, y=y, fill=category)) +
geom_bar(stat="identity", position=position_dodge()) + scale_x_discrete(limits=rownames(data)) +
scale_fill_grey(start=0.6, end=0) + scale_y_continuous(breaks=number_ticks(10)) +
xlab(xlab) + ylab(ylab) + ggtitle(title) #ensure order of digit places
#+ theme(legend.position="bottom") #legend position
return(hist2d_multiple)
}
data = data.frame(AJG_2012 = c(0.509, 0.30, 1, 1, 0.929, 0.65),
MD_2012 = c(0.1875,  -1, NA, 1, 0, NA),
GOOG_2014 = c(-0.842, -0.842, 0.333, 0.269, 0.105, 0.667),
ENSG_2009 = c(0, -1, -1, -1, 0, NA),
IBM_2010 = c(0.176, 0.176, 0, 0.717, 1, 0.823))
rownames(data) = c('Acquisition counts', 'Acquired firm names', 'Individual acquisition cost', 'Total acquisition cost',
'Named acquisitions in SDC found in 10K', 'Named acquisitions in the 10-K found in SDC')
data
hist_2D_variables(data, data_style='col', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram')
hist_2D_variables = function(data, data_style='row', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram'){
if (data_style == 'row'){
#transpose it to column style, what ggplot wants
data = data.frame(t(data))
}
#intialize a df for plotting, columns = x, y, category
plotting_data = data.frame(matrix(nrow = 0, ncol = 3))
colnames(plotting_data) = c('x', 'y', 'category')
#fill up df
for (name in colnames(data)){
single_category_data = data.frame(x=rownames(data), y=data[[name]], category=rep(name, nrow(data)))
plotting_data = rbind(plotting_data, single_category_data)
}
#stacked 2d barplot with multiple groups
#use position=position_dodge()
library(ggplot2)
hist2d_multiple = ggplot(data=plotting_data, aes(x=x, y=y, fill=category)) +
geom_bar(stat="identity", position=position_dodge()) + scale_x_discrete(limits=rownames(data)) +
scale_fill_grey(start=0.6, end=0.1) + scale_y_continuous(breaks=number_ticks(10)) +
xlab(xlab) + ylab(ylab) + ggtitle(title) #ensure order of digit places
#+ theme(legend.position="bottom") #legend position
return(hist2d_multiple)
}
data = data.frame(AJG_2012 = c(0.509, 0.30, 1, 1, 0.929, 0.65),
MD_2012 = c(0.1875,  -1, NA, 1, 0, NA),
GOOG_2014 = c(-0.842, -0.842, 0.333, 0.269, 0.105, 0.667),
ENSG_2009 = c(0, -1, -1, -1, 0, NA),
IBM_2010 = c(0.176, 0.176, 0, 0.717, 1, 0.823))
rownames(data) = c('Acquisition counts', 'Acquired firm names', 'Individual acquisition cost', 'Total acquisition cost',
'Named acquisitions in SDC found in 10K', 'Named acquisitions in the 10-K found in SDC')
data
hist_2D_variables(data, data_style='col', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram')
hist_2D_variables(data, data_style='row', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram')
hist_2D_variables = function(data, data_style='row', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram'){
if (data_style == 'row'){
#transpose it to column style, what ggplot wants
data = data.frame(t(data))
}
#intialize a df for plotting, columns = x, y, category
plotting_data = data.frame(matrix(nrow = 0, ncol = 3))
colnames(plotting_data) = c('x', 'y', 'category')
#fill up df
for (name in colnames(data)){
single_category_data = data.frame(x=rownames(data), y=data[[name]], category=rep(name, nrow(data)))
plotting_data = rbind(plotting_data, single_category_data)
}
#stacked 2d barplot with multiple groups
#use position=position_dodge()
library(ggplot2)
hist2d_multiple = ggplot(data=plotting_data, aes(x=x, y=y, fill=category)) +
geom_bar(stat="identity", position=position_dodge()) + scale_x_discrete(limits=rownames(data)) +
scale_fill_grey(start=0.6, end=0.1) + scale_y_continuous(breaks=number_ticks(10)) +
xlab(xlab) + ylab(ylab) + ggtitle(title) #ensure order of digit places
#+ theme(legend.position="bottom") #legend position
return(hist2d_multiple)
}
plot_table_by_columns = function(digits_table, name='', data_style='col', save=FALSE){
plot_list = list()
for (i in 1:length(digits_table)){
curr_digit_place = colnames(digits_table)[i]
hist_digit_place_i = hist_2D(digits_table[i], data_style=data_style, xlab='digits', ylab='frequency', title=paste(name, curr_digit_place), hline=NA)
plot_list[[curr_digit_place]] = hist_digit_place_i
}
plots = plot_multiple_hist2d(plot_list)
# if (save){
#   filename = paste(name, '_2D_histograms.pdf', sep='')
#   print(filename)
#   ggsave(plots, file=paste(name, '_2D_histograms.pdf', sep=''))
# }
return(plots)
}
data = data.frame(AJG_2012 = c(0.509, 0.30, 1, 1, 0.929, 0.65),
MD_2012 = c(0.1875,  -1, NA, 1, 0, NA),
GOOG_2014 = c(-0.842, -0.842, 0.333, 0.269, 0.105, 0.667),
ENSG_2009 = c(0, -1, -1, -1, 0, NA),
IBM_2010 = c(0.176, 0.176, 0, 0.717, 1, 0.823))
rownames(data) = c('Acquisition counts', 'Acquired firm names', 'Individual acquisition cost', 'Total acquisition cost',
'Named acquisitions in SDC found in 10K', 'Named acquisitions in the 10-K found in SDC')
data
hist_2D_variables(data, data_style='col', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram')
hist_2D_variables(data, data_style='row', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram')
plot_table_by_columns(data, name='', data_style='col', save=FALSE)
plot_table_by_columns(data, name='', data_style='col', save=FALSE)
plot_table_by_columns(data, name='', data_style='row', save=FALSE)
plot_table_by_columns(t(data), name='', data_style='col', save=FALSE)
hist_2D_variables(data, data_style='col', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram')
plot_table_by_columns(t(data), name='', data_style='col', save=FALSE)
t(data)
plot_table_by_columns(t(data), name='', data_style='row', save=FALSE)
plot_table_by_columns(t(data), name='', data_style='col', save=FALSE)
plot_table_by_columns(data, name='', data_style='col', save=FALSE)
plot_table_by_columns(data, name='', data_style='row', save=FALSE)
data
t_data = t(data)
t_data
t_data[1]
t_data = data.frame(t(data))
t_data[1]
plot_table_by_columns(data, name='', data_style='row', save=FALSE)
plot_table_by_columns(t_data, name='', data_style='row', save=FALSE)
plot_table_by_columns(t_data, name='', data_style='col', save=FALSE)
hist_2D_variables = function(data, data_style='row', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram'){
if (data_style == 'row'){
#transpose it to column style, what ggplot wants
data = data.frame(t(data))
}
#intialize a df for plotting, columns = x, y, category
plotting_data = data.frame(matrix(nrow = 0, ncol = 3))
colnames(plotting_data) = c('x', 'y', 'category')
#fill up df
for (name in colnames(data)){
single_category_data = data.frame(x=rownames(data), y=data[[name]], category=rep(name, nrow(data)))
plotting_data = rbind(plotting_data, single_category_data)
}
#stacked 2d barplot with multiple groups
#use position=position_dodge()
library(ggplot2)
hist2d_multiple = ggplot(data=plotting_data, aes(x=x, y=y, fill=category)) +
geom_bar(stat="identity", position=position_dodge()) + scale_x_discrete(limits=rownames(data)) +
scale_fill_grey(start=0.6, end=0.1) + scale_y_continuous(breaks=number_ticks(10)) +
xlab(xlab) + ylab(ylab) + ggtitle(title) #ensure order of digit places
#+ theme(legend.position="bottom") #legend position
return(hist2d_multiple)
}
plot_table_by_columns = function(digits_table, name='', data_style='col', save=FALSE){
plot_list = list()
for (i in 1:length(digits_table)){
curr_digit_place = colnames(digits_table)[i]
hist_digit_place_i = hist_2D(digits_table[i], data_style=data_style, xlab='digits', ylab='frequency', title=paste(name, curr_digit_place), hline=NA)
plot_list[[curr_digit_place]] = hist_digit_place_i
}
plots = plot_multiple_hist2d(plot_list)
# if (save){
#   filename = paste(name, '_2D_histograms.pdf', sep='')
#   print(filename)
#   ggsave(plots, file=paste(name, '_2D_histograms.pdf', sep=''))
# }
return(plots)
}
data = data.frame(AJG_2012 = c(0.509, 0.30, 1, 1, 0.929, 0.65),
MD_2012 = c(0.1875,  -1, NA, 1, 0, NA),
GOOG_2014 = c(-0.842, -0.842, 0.333, 0.269, 0.105, 0.667),
ENSG_2009 = c(0, -1, -1, -1, 0, NA),
IBM_2010 = c(0.176, 0.176, 0, 0.717, 1, 0.823))
rownames(data) = c('Acquisition counts', 'Acquired firm names', 'Individual acquisition cost', 'Total acquisition cost',
'Named acquisitions in SDC found in 10K', 'Named acquisitions in the 10-K found in SDC')
data
hist_2D_variables(data, data_style='col', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram')
hist_2D_variables(data, data_style='row', xlab='digits', ylab='frequency', title='Multi-variable 2D Histogram')
t_data = data.frame(t(data))
plot_table_by_columns(t_data, name='', data_style='col', save=FALSE)
hist_2D_variables(data, data_style='col', xlab='indicator', ylab='percentage', title='10K compared to SDC: positive == 10K better')
hist_2D_variables(data, data_style='row', xlab='firm', ylab='percentage', title='10K compared to SDC: positive == 10K better')
t_data = data.frame(t(data))
plot_table_by_columns(t_data, name='', data_style='col', save=FALSE)
rownames(data) = c('Acquisition Counts', 'Acquired Firm Names', 'Number of Individual Acquisition Cost', 'Total acquisition cost',
'Named Acquisitions in SDC found in 10K', 'Named Acquisitions in the 10-K found in SDC')
data
hist_2D_variables(data, data_style='col', xlab='indicator', ylab='percentage', title='10K compared to SDC: positive == 10K better')
hist_2D_variables(data, data_style='row', xlab='firm', ylab='percentage', title='10K compared to SDC: positive == 10K better')
t_data = data.frame(t(data))
plot_table_by_columns(t_data, name='', data_style='col', save=FALSE)
