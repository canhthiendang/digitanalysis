align_digits = function(indata, outdata, naming_method, align_direction='left', colname='Unknown'){
max = max_length(indata) #max length of largest number in indata
#intialize all digit places to NA
print(max)
for (i in 1:max){
outdata[[paste(colname, naming_method[i])]] = NA
print(paste(colname, naming_method[i]))
}
#print(head(outdata))
for (j in 1:length(indata)){
#split each number into chars
chars = strsplit(as.character(indata[j]), "")[[1]]
#reverse it since we are aligning from the right so right-first digit comes first
if (align_direction == 'right'){
chars = rev(chars)
}
for (k in 1:length(chars)){
#append them to table from the left/right
print(chars)
# if (is.na(as.integer(chars[k]))){
#   print('oof')
# }
outdata[[paste(colname, naming_method[k])]][j] = as.integer(chars[k])
#print(outdata[[paste(colname, naming_method[k])]][j])
}
}
print(outdata)
}
col_analyzing = c("ALEXP")#,"BENTOT", "BENM", "BENF")
#only one data column
#can be specified as both numeric_data='sdfsfsf' or numeric_data=c('dsdfsfsf')
if (length(col_analyzing) == 1){
#name of current data column modifying
col_name = col_analyzing[1]
#turn into numbers
cleaned_data[[col_name]] = as.numeric(gsub(",","",cleaned_data[[col_name]]))
#rounding
cleaned_data[[col_name]] = round_data(cleaned_data[[col_name]])
#update 'numeric' object
numeric_data[[col_name]] = NA
numeric_data[[col_name]] = cleaned_data[[col_name]]
#update 'align_left'
align_digits(indata=cleaned_data[[col_name]], outdata=left_aligned_data, naming_method=left_aligned_column_names, align_direction='left', colname=col_name)
#update 'align_right'
align_digits(indata=cleaned_data[[col_name]], outdata=right_aligned_data, naming_method=right_aligned_column_names, align_direction='right', colname=col_name)
print(head(left_aligned_data))
} else {
#multiple data columns
for (i in 1:length(col_analyzing)) {
#name of current data column modifying
col_name = col_analyzing[i]
#turn into numbers
cleaned_data[[col_name]] = as.numeric(gsub(",","",cleaned_data[[col_name]]))
#rounding
cleaned_data[[col_analyzing[i]]] = round_data(cleaned_data[[col_name]])
#update 'numeric' object
numeric_data[[col_name]] = NA
numeric_data[[col_name]] = cleaned_data[[col_name]]
#update 'align_left'
align_digits(indata=cleaned_data[[col_name]], outdata=left_aligned_data, naming_method=left_aligned_column_names, align_direction='left', colname=col_name)
#update 'align_right'
align_digits(indata=cleaned_data[[col_name]], outdata=right_aligned_data, naming_method=right_aligned_column_names, align_direction='right', colname=col_name)
print(head(left_aligned_data))
}
}
View(cleaned_data)
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
drop_nan = function(df, col_conerned){
for (i in 1:length(col_conerned)){
print(col_conerned[i])
df = df[!is.na(df[[col_conerned[i]]]), ]
}
#df[!is.na(df$B), ]
}
#data format: row is observation; column is category
col_analyzing = c("ALEXP","BENTOT", "BENM", "BENF")
#clean up the number columns with numeric data to be analyzed->'cleaned' of the class
cleaned_data = data.frame(raw_data) #make copy without pointer issue
#drop rows with NaNs in any numeric data column
drop_nan(cleaned_data, col_analyzing)
cleaned_data = completeFun(cleaned_data, col_analyzing)
View(cleaned_data)
#raw input data->'raw' of the class
raw_data = read.csv('C:\\Users\\happy\\OneDrive - California Institute of Technology\\Desktop\\ARID MASTER FINAL.csv')
#clean up the number columns with numeric data to be analyzed->'cleaned' of the class
cleaned_data = data.frame(raw_data) #make copy without pointer issue
#drop rows with NaNs in any numeric data column
drop_nan(cleaned_data, col_analyzing)
cleaned_data = completeFun(cleaned_data, col_analyzing)
View(cleaned_data)
#drop rows with NaNs in any numeric data column
drop_nan(cleaned_data, col_analyzing)
View(cleaned_data)
cleaned_data[["ALEXP"]][299]
drop_nan_empty = function(df, col_conerned){
for (i in 1:length(col_conerned)){
df[!(is.na(df[[col_conerned[i]]]) | df[[col_conerned[i]]]==""), ]
}
#df[!is.na(df$B), ]
}
#drop rows with NaNs in any numeric data column
drop_nan_empty(cleaned_data, col_analyzing)
View(cleaned_data)
cleaned_data[["ALEXP"]][299]
cleaned_data[["ALEXP"]]==""
drop_nan_empty = function(df, col_conerned){
for (i in 1:length(col_conerned)){
df = df[!(is.na(df[[col_conerned[i]]]) | df[[col_conerned[i]]]==""), ]
}
#df[!is.na(df$B), ]
}
#drop rows with NaNs in any numeric data column
drop_nan_empty(cleaned_data, col_analyzing)
drop_nan_empty = function(df, col_conerned){
output = data.frame(df)
for (i in 1:length(col_conerned)){
output = output[!(is.na(output[[col_conerned[i]]]) | output[[col_conerned[i]]]==""), ]
}
return(output)
#df[!is.na(df$B), ]
}
#drop rows with NaNs in any numeric data column
cleaned_data = drop_nan_empty(cleaned_data, col_analyzing)
#the dataframe with only the data being analyzed->'numeric' of the class
numeric_data = data.frame(matrix(ncol = 0, nrow = length(cleaned_data[,1])))
#the dataframe with the left aligned digits of each data column to be analyzed->'left_aligned' of the class
#i.e. a column is 'X'; first digit will be at column '1st digit' + 'X'
left_aligned_column_names = c('1st digit', '2nd digit', '3rd digit', '4th digit', '5th digit', '6th digit', '7th digit',
'8th digit', '9th digit', '10th digit', '11th digit', '12th digit', '13th digit')
left_aligned_data = data.frame(matrix(ncol = 0, nrow = length(cleaned_data[,1])))
#the dataframe with the right aligned digits of each data column to be analyzed->'right_aligned' of the class
#i.e. a column is 'X'; first digit will be at column '1s' + 'X'
right_aligned_column_names = c('1s', '10s', '100s', '1k', '10k', '100k', '1m', '10m', '100m', '1b', '10b', '100b', '1t')
right_aligned_data = data.frame(matrix(ncol = 0, nrow = length(cleaned_data[,1])))
#align the digits from the left/right of a data column and update it to the specified data frame
align_digits = function(indata, outdata, naming_method, align_direction='left', colname='Unknown'){
max = max_length(indata) #max length of largest number in indata
#intialize all digit places to NA
print(max)
for (i in 1:max){
outdata[[paste(colname, naming_method[i])]] = NA
print(paste(colname, naming_method[i]))
}
#print(head(outdata))
for (j in 1:length(indata)){
#split each number into chars
chars = strsplit(as.character(indata[j]), "")[[1]]
#reverse it since we are aligning from the right so right-first digit comes first
if (align_direction == 'right'){
chars = rev(chars)
}
for (k in 1:length(chars)){
#append them to table from the left/right
print(chars)
# if (is.na(as.integer(chars[k]))){
#   print('oof')
# }
outdata[[paste(colname, naming_method[k])]][j] = as.integer(chars[k])
#print(outdata[[paste(colname, naming_method[k])]][j])
}
}
print(outdata)
}
col_analyzing = c("ALEXP","BENTOT", "BENM", "BENF")
#only one data column
#can be specified as both numeric_data='sdfsfsf' or numeric_data=c('dsdfsfsf')
if (length(col_analyzing) == 1){
#name of current data column modifying
col_name = col_analyzing[1]
#turn into numbers
cleaned_data[[col_name]] = as.numeric(gsub(",","",cleaned_data[[col_name]]))
#rounding
cleaned_data[[col_name]] = round_data(cleaned_data[[col_name]])
#update 'numeric' object
numeric_data[[col_name]] = NA
numeric_data[[col_name]] = cleaned_data[[col_name]]
#update 'align_left'
align_digits(indata=cleaned_data[[col_name]], outdata=left_aligned_data, naming_method=left_aligned_column_names, align_direction='left', colname=col_name)
#update 'align_right'
align_digits(indata=cleaned_data[[col_name]], outdata=right_aligned_data, naming_method=right_aligned_column_names, align_direction='right', colname=col_name)
print(head(left_aligned_data))
} else {
#multiple data columns
for (i in 1:length(col_analyzing)) {
#name of current data column modifying
col_name = col_analyzing[i]
#turn into numbers
cleaned_data[[col_name]] = as.numeric(gsub(",","",cleaned_data[[col_name]]))
#rounding
cleaned_data[[col_analyzing[i]]] = round_data(cleaned_data[[col_name]])
#update 'numeric' object
numeric_data[[col_name]] = NA
numeric_data[[col_name]] = cleaned_data[[col_name]]
#update 'align_left'
align_digits(indata=cleaned_data[[col_name]], outdata=left_aligned_data, naming_method=left_aligned_column_names, align_direction='left', colname=col_name)
#update 'align_right'
align_digits(indata=cleaned_data[[col_name]], outdata=right_aligned_data, naming_method=right_aligned_column_names, align_direction='right', colname=col_name)
print(head(left_aligned_data))
}
}
col_analyzing = c("ALEXP","BENTOT", "BENM", "BENF")
#only one data column
#can be specified as both numeric_data='sdfsfsf' or numeric_data=c('dsdfsfsf')
if (length(col_analyzing) == 1){
#name of current data column modifying
col_name = col_analyzing[1]
#turn into numbers
cleaned_data[[col_name]] = as.numeric(gsub(",","",cleaned_data[[col_name]]))
#rounding
cleaned_data[[col_name]] = round_data(cleaned_data[[col_name]])
#update 'numeric' object
numeric_data[[col_name]] = NA
numeric_data[[col_name]] = cleaned_data[[col_name]]
#update 'align_left'
align_digits(indata=cleaned_data[[col_name]], outdata=left_aligned_data, naming_method=left_aligned_column_names, align_direction='left', colname=col_name)
#update 'align_right'
align_digits(indata=cleaned_data[[col_name]], outdata=right_aligned_data, naming_method=right_aligned_column_names, align_direction='right', colname=col_name)
#print(head(left_aligned_data))
} else {
#multiple data columns
for (i in 1:length(col_analyzing)) {
#name of current data column modifying
col_name = col_analyzing[i]
#turn into numbers
cleaned_data[[col_name]] = as.numeric(gsub(",","",cleaned_data[[col_name]]))
#rounding
cleaned_data[[col_analyzing[i]]] = round_data(cleaned_data[[col_name]])
#update 'numeric' object
numeric_data[[col_name]] = NA
numeric_data[[col_name]] = cleaned_data[[col_name]]
#update 'align_left'
align_digits(indata=cleaned_data[[col_name]], outdata=left_aligned_data, naming_method=left_aligned_column_names, align_direction='left', colname=col_name)
#update 'align_right'
align_digits(indata=cleaned_data[[col_name]], outdata=right_aligned_data, naming_method=right_aligned_column_names, align_direction='right', colname=col_name)
#print(head(left_aligned_data))
}
}
#align the digits from the left/right of a data column and update it to the specified data frame
align_digits = function(indata, outdata, naming_method, align_direction='left', colname='Unknown'){
max = max_length(indata) #max length of largest number in indata
#intialize all digit places to NA
#print(max)
for (i in 1:max){
outdata[[paste(colname, naming_method[i])]] = NA
print(paste(colname, naming_method[i]))
}
#print(head(outdata))
for (j in 1:length(indata)){
#split each number into chars
chars = strsplit(as.character(indata[j]), "")[[1]]
#reverse it since we are aligning from the right so right-first digit comes first
if (align_direction == 'right'){
chars = rev(chars)
}
for (k in 1:length(chars)){
#append them to table from the left/right
print(chars)
# if (is.na(as.integer(chars[k]))){
#   print('oof')
# }
outdata[[paste(colname, naming_method[k])]][j] = as.integer(chars[k])
#print(outdata[[paste(colname, naming_method[k])]][j])
}
}
#print(outdata)
}
col_analyzing = c("ALEXP","BENTOT", "BENM", "BENF")
#only one data column
#can be specified as both numeric_data='sdfsfsf' or numeric_data=c('dsdfsfsf')
if (length(col_analyzing) == 1){
#name of current data column modifying
col_name = col_analyzing[1]
#turn into numbers
cleaned_data[[col_name]] = as.numeric(gsub(",","",cleaned_data[[col_name]]))
#rounding
cleaned_data[[col_name]] = round_data(cleaned_data[[col_name]])
#update 'numeric' object
numeric_data[[col_name]] = NA
numeric_data[[col_name]] = cleaned_data[[col_name]]
#update 'align_left'
align_digits(indata=cleaned_data[[col_name]], outdata=left_aligned_data, naming_method=left_aligned_column_names, align_direction='left', colname=col_name)
#update 'align_right'
align_digits(indata=cleaned_data[[col_name]], outdata=right_aligned_data, naming_method=right_aligned_column_names, align_direction='right', colname=col_name)
} else {
#multiple data columns
for (i in 1:length(col_analyzing)) {
#name of current data column modifying
col_name = col_analyzing[i]
#turn into numbers
cleaned_data[[col_name]] = as.numeric(gsub(",","",cleaned_data[[col_name]]))
#rounding
cleaned_data[[col_analyzing[i]]] = round_data(cleaned_data[[col_name]])
#update 'numeric' object
numeric_data[[col_name]] = NA
numeric_data[[col_name]] = cleaned_data[[col_name]]
#update 'align_left'
align_digits(indata=cleaned_data[[col_name]], outdata=left_aligned_data, naming_method=left_aligned_column_names, align_direction='left', colname=col_name)
#update 'align_right'
align_digits(indata=cleaned_data[[col_name]], outdata=right_aligned_data, naming_method=right_aligned_column_names, align_direction='right', colname=col_name)
#print(head(left_aligned_data))
}
}
#align the digits from the left/right of a data column and update it to the specified data frame
align_digits = function(indata, outdata, naming_method, align_direction='left', colname='Unknown'){
max = max_length(indata) #max length of largest number in indata
#intialize all digit places to NA
#print(max)
for (i in 1:max){
outdata[[paste(colname, naming_method[i])]] = NA
print(paste(colname, naming_method[i]))
}
#print(head(outdata))
for (j in 1:length(indata)){
#split each number into chars
chars = strsplit(as.character(indata[j]), "")[[1]]
#reverse it since we are aligning from the right so right-first digit comes first
if (align_direction == 'right'){
chars = rev(chars)
}
for (k in 1:length(chars)){
#append them to table from the left/right
#print(chars)
# if (is.na(as.integer(chars[k]))){
#   print('oof')
# }
outdata[[paste(colname, naming_method[k])]][j] = as.integer(chars[k])
#print(outdata[[paste(colname, naming_method[k])]][j])
}
}
#print(outdata)
}
col_analyzing = c("ALEXP","BENTOT", "BENM", "BENF")
#only one data column
#can be specified as both numeric_data='sdfsfsf' or numeric_data=c('dsdfsfsf')
if (length(col_analyzing) == 1){
#name of current data column modifying
col_name = col_analyzing[1]
#turn into numbers
cleaned_data[[col_name]] = as.numeric(gsub(",","",cleaned_data[[col_name]]))
#rounding
cleaned_data[[col_name]] = round_data(cleaned_data[[col_name]])
#update 'numeric' object
numeric_data[[col_name]] = NA
numeric_data[[col_name]] = cleaned_data[[col_name]]
#update 'align_left'
align_digits(indata=cleaned_data[[col_name]], outdata=left_aligned_data, naming_method=left_aligned_column_names, align_direction='left', colname=col_name)
#update 'align_right'
align_digits(indata=cleaned_data[[col_name]], outdata=right_aligned_data, naming_method=right_aligned_column_names, align_direction='right', colname=col_name)
} else {
#multiple data columns
for (i in 1:length(col_analyzing)) {
#name of current data column modifying
col_name = col_analyzing[i]
#turn into numbers
cleaned_data[[col_name]] = as.numeric(gsub(",","",cleaned_data[[col_name]]))
#rounding
cleaned_data[[col_analyzing[i]]] = round_data(cleaned_data[[col_name]])
#update 'numeric' object
numeric_data[[col_name]] = NA
numeric_data[[col_name]] = cleaned_data[[col_name]]
#update 'align_left'
align_digits(indata=cleaned_data[[col_name]], outdata=left_aligned_data, naming_method=left_aligned_column_names, align_direction='left', colname=col_name)
#update 'align_right'
align_digits(indata=cleaned_data[[col_name]], outdata=right_aligned_data, naming_method=right_aligned_column_names, align_direction='right', colname=col_name)
#print(head(left_aligned_data))
}
}
dim(left_aligned_data)
#align the digits from the left/right of a data column and update it to the specified data frame
align_digits = function(indata, outdata, naming_method, align_direction='left', colname='Unknown'){
max = max_length(indata) #max length of largest number in indata
#intialize all digit places to NA
for (i in 1:max){
outdata[[paste(colname, naming_method[i])]] = NA
print(paste(colname, naming_method[i]))
}
#print(head(outdata))
for (j in 1:length(indata)){
#split each number into chars
chars = strsplit(as.character(indata[j]), "")[[1]]
#reverse it since we are aligning from the right so right-first digit comes first
if (align_direction == 'right'){
chars = rev(chars)
}
for (k in 1:length(chars)){
#append them to table from the left/right
#print(chars)
# if (is.na(as.integer(chars[k]))){
#   print('oof')
# }
outdata[[paste(colname, naming_method[k])]][j] = as.integer(chars[k])
#print(outdata[[paste(colname, naming_method[k])]][j])
}
}
return(outdata)
}
col_analyzing = c("ALEXP","BENTOT", "BENM", "BENF")
#only one data column
#can be specified as both numeric_data='sdfsfsf' or numeric_data=c('dsdfsfsf')
if (length(col_analyzing) == 1){
#name of current data column modifying
col_name = col_analyzing[1]
#turn into numbers
cleaned_data[[col_name]] = as.numeric(gsub(",","",cleaned_data[[col_name]]))
#rounding
cleaned_data[[col_name]] = round_data(cleaned_data[[col_name]])
#update 'numeric' object
numeric_data[[col_name]] = NA
numeric_data[[col_name]] = cleaned_data[[col_name]]
#update 'align_left'
align_digits(indata=cleaned_data[[col_name]], outdata=left_aligned_data, naming_method=left_aligned_column_names, align_direction='left', colname=col_name)
#update 'align_right'
align_digits(indata=cleaned_data[[col_name]], outdata=right_aligned_data, naming_method=right_aligned_column_names, align_direction='right', colname=col_name)
} else {
#multiple data columns
for (i in 1:length(col_analyzing)) {
#name of current data column modifying
col_name = col_analyzing[i]
#turn into numbers
cleaned_data[[col_name]] = as.numeric(gsub(",","",cleaned_data[[col_name]]))
#rounding
cleaned_data[[col_analyzing[i]]] = round_data(cleaned_data[[col_name]])
#update 'numeric' object
numeric_data[[col_name]] = NA
numeric_data[[col_name]] = cleaned_data[[col_name]]
#update 'align_left'
left_aligned_data = align_digits(indata=cleaned_data[[col_name]], outdata=left_aligned_data, naming_method=left_aligned_column_names, align_direction='left', colname=col_name)
#update 'align_right'
right_aligned_data = align_digits(indata=cleaned_data[[col_name]], outdata=right_aligned_data, naming_method=right_aligned_column_names, align_direction='right', colname=col_name)
#print(head(left_aligned_data))
}
}
dim(left_aligned_data)
left_aligned_column_names
left_aligned_data
View(left_aligned_data)
View(right_aligned_data)
View(cleaned_data)
#the dataframe with the left aligned digits of each data column to be analyzed->'left_aligned' of the class
#i.e. a column is 'X'; first digit will be at column '1st digit' + 'X'
left_aligned_column_names = c('1st digit', '2nd digit', '3rd digit', '4th digit', '5th digit', '6th digit', '7th digit',
'8th digit', '9th digit', '10th digit', '11th digit', '12th digit', '13th digit')
left_aligned_data = data.frame(matrix(ncol = 0, nrow = length(cleaned_data[,1])))
#the dataframe with the right aligned digits of each data column to be analyzed->'right_aligned' of the class
#i.e. a column is 'X'; first digit will be at column '1s' + 'X'
right_aligned_column_names = c('1s', '10s', '100s', '1k', '10k', '100k', '1m', '10m', '100m', '1b', '10b', '100b', '1t')
right_aligned_data = data.frame(matrix(ncol = 0, nrow = length(cleaned_data[,1])))
#align the digits from the left/right of a data column and update it to the specified data frame
align_digits = function(indata, outdata, naming_method, align_direction='left', colname='Unknown'){
max = max_length(indata) #max length of largest number in indata
#intialize all digit places to NA
for (i in 1:max){
outdata[[paste(colname, naming_method[i])]] = NA
print(paste(colname, naming_method[i]))
}
#print(head(outdata))
for (j in 1:length(indata)){
#split each number into chars
chars = strsplit(as.character(indata[j]), "")[[1]]
#reverse it since we are aligning from the right so right-first digit comes first
if (align_direction == 'right'){
chars = rev(chars)
}
for (k in 1:length(chars)){
#append them to table from the left/right
#print(chars)
# if (is.na(as.integer(chars[k]))){
#   print('oof')
# }
outdata[[paste(colname, naming_method[k])]][j] = as.integer(chars[k])
#print(outdata[[paste(colname, naming_method[k])]][j])
}
}
return(outdata)
}
col_analyzing = c("ALEXP")#,"BENTOT", "BENM", "BENF")
##can be specified as both numeric_data='sdfsfsf' or numeric_data=c('dsdfsfsf') or or numeric_data=c('dsdfsfsf',...)
for (i in 1:length(col_analyzing)) {
#name of current data column modifying
col_name = col_analyzing[i]
#turn into numbers
cleaned_data[[col_name]] = as.numeric(gsub(",","",cleaned_data[[col_name]]))
#rounding
cleaned_data[[col_analyzing[i]]] = round_data(cleaned_data[[col_name]])
#update 'numeric' object
numeric_data[[col_name]] = NA
numeric_data[[col_name]] = cleaned_data[[col_name]]
#update 'align_left'
left_aligned_data = align_digits(indata=cleaned_data[[col_name]], outdata=left_aligned_data, naming_method=left_aligned_column_names, align_direction='left', colname=col_name)
#update 'align_right'
right_aligned_data = align_digits(indata=cleaned_data[[col_name]], outdata=right_aligned_data, naming_method=right_aligned_column_names, align_direction='right', colname=col_name)
#print(head(left_aligned_data))
}
########
#create our own class now, finally!
DigitAnalysis = setClass('DigitAnalysis', slots = c(raw="data.frame", cleaned="data.frame",
numbers="data.frame", left_aligned="data.frame",
right_aligned="data.frame"))
DigitData = DigitAnalysis(raw = raw_data, cleaned = cleaned_data, numbers=numeric_data, left_aligned=left_aligned_data, right_aligned=right_aligned_data)
DigitData@left_aligned$`ALEXP 1st digit
DigitData@left_aligned$`ALEXP 1st digit`
######
test = DigitAnalysis(cleaned = data.frame(matrix(ncol = 1, nrow = 1)), values=data.frame(matrix(ncol = 1, nrow = 1)))
DigitData@left_aligned$`ALEXP 1st digit`
slot(DigitData, object = numeric_data)
slot(DigitData, object = number)
slot(DigitData, object = numbers)
slot(DigitData, object = 'numbers')
slot(DigitData, 'numbers')
